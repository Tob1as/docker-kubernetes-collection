##  _   _    _    ____
## | | | |  / \  |  _ \ _ __ _____  ___   _
## | |_| | / _ \ | |_) | '__/ _ \ \/ / | | |
## |  _  |/ ___ \|  __/| | | (_) >  <| |_| |
## |_| |_/_/   \_\_|   |_|  \___/_/\_\\__, |
##                                    |___/
## 

# HAProxy - proxying for TCP and HTTP-based applications
# https://www.haproxy.org/ + https://github.com/haproxy/haproxy
# https://hub.docker.com/_/haproxy & https://github.com/docker-library/haproxy
# Docs: https://docs.haproxy.org/
# Docs (limited): https://www.haproxy.com/documentation/hapee/latest/

---

apiVersion: v1
kind: Namespace
metadata:
  name: haproxy
  labels:
    app: haproxy

---

apiVersion: apps/v1
kind: DaemonSet         # DaemonSet (run on every host)
metadata:
  name: haproxy
  namespace: haproxy
  labels:
    app: haproxy
spec:
  selector:
    matchLabels:
      app: haproxy
  template:
    metadata:
      name: haproxy
      labels:
        app: haproxy
    spec:
      #imagePullSecrets:
      #  - name: regcred
      hostNetwork: true     # use host network !! 
      containers:
      - name: haproxy
        image: haproxy:lts-alpine
        volumeMounts:
        - name: config
          subPath: haproxy.cfg
          mountPath: /usr/local/etc/haproxy/haproxy.cfg
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "0.1"
          limits:
            memory: "256Mi"
            cpu: "0.5"
      volumes:
      - name: config
        configMap:
          name: haproxy-file-config

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-file-config
  namespace: haproxy
  labels:
    app: haproxy
data:
  haproxy.cfg: |
    global
      daemon
      maxconn 4096
      log stdout format raw local0 debug
      
    defaults
      mode http
      timeout client 10s
      timeout connect 5s
      timeout server 10s
      timeout http-request 10s
      log global

    userlist admins-credentials
      user admin insecure-password passw0rd
    
    frontend stats
      bind *:8404
      option httpclose
      http-request auth unless { http_auth(admins-credentials) }
      http-request use-service prometheus-exporter if { path /metrics }
      stats enable
      stats uri /stats
      stats refresh 10s
      #stats hide-version
      stats show-node
      stats show-desc K8s-Cluster
      #stats realm   Haproxy\ Statistics
      #stats auth    admin:passw0rd
      #stats admin if TRUE
      stats admin if LOCALHOST
      #stats admin if { src 127.0.0.0/8 192.168.1.0/16 }

    frontend webproxy
      bind             0.0.0.0:8080 name 0.0.0.0:8080
      mode             tcp
      log              global
      timeout client   30000ms
      default_backend  webproxy_backend-AD_ipvANY

    frontend webproxy-ssl
       bind             0.0.0.0:8443 name 0.0.0.0:8443
       mode             tcp
       log              global
       timeout client   30000ms
       default_backend  webproxy_ssl_backend-AD_ipvANY

    backend webproxy_backend-AD_ipvANY
       mode             tcp
       log              global
       balance          source
       timeout connect  30000ms
       timeout server   30000ms
       retries          3
       server           webproxy <HOST-IP>:80 check inter 1000
       # here add more server
    
    backend webproxy_ssl_backend-AD_ipvANY
      mode             tcp
      log              global
      balance          source
      timeout connect  30000ms
      timeout server   30000ms
      retries          3
      server           webproxy-ssl <HOST-IP>:443 check inter 1000
      # here add more server
      
--- 

apiVersion: v1
kind: Service
metadata:
  name: haproxy
  namespace: haproxy
  labels:
    app: haproxy
spec:
  type: ClusterIP
  ports:
  - name: "stats-metrics"
    protocol: TCP
    port: 8404
    targetPort: 8404
  selector:
    app: haproxy

--- 

# https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/user-guides/getting-started.md#deploying-a-sample-application
# https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/user-guides/basic-auth.md#basic-auth-for-targets

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: haproxy
  namespace: haproxy
  labels:
    app: haproxy
spec:
  endpoints:
  - path: /metrics
    basicAuth:
      password:
        name: haproxy-stats-basic-auth
        key: password
      username:
        name: haproxy-stats-basic-auth
        key: user
    scheme: HTTP
    port: stats-metrics # 8404
    targetPort: 8404
    #tlsConfig:
    #  ca: {}
    #  cert: {}
    #  insecureSkipVerify: true
  selector:
    matchLabels:
      app: haproxy
---
# echo -n 'value' | base64
apiVersion: v1
kind: Secret
metadata:
  name: haproxy-stats-basic-auth
  namespace: haproxy
  labels:
    app: haproxy
type: Opaque
data:
  user: YWRtaW4=         # admin
  password: cGFzc3cwcmQ= # see haproxy-config
  
---

# https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/user-guides/alerting.md#deploying-prometheus-rules
# Example: https://github.com/prometheus-operator/kube-prometheus/blob/main/manifests/prometheus-prometheusRule.yaml
# haproxy examples: https://samber.github.io/awesome-prometheus-alerts/rules#haproxy-1
# Garafana Dashboard: https://grafana.com/grafana/dashboards/12693-haproxy-2-full/

apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: haproxy
  namespace: haproxy
  labels:
    app: haproxy
spec:
  groups:
    - name: haproxy.rules
      rules:
      
        - alert: HaproxyHighHttp4xxErrorRateBackend
          expr: '((sum by (proxy) (rate(haproxy_server_http_responses_total{code="4xx"}[1m])) / sum by (proxy) (rate(haproxy_server_http_responses_total[1m]))) * 100) > 5'
          for: 1m
          labels:
            severity: critical
          annotations:
            summary: HAProxy high HTTP 4xx error rate backend (instance {{ $labels.instance }})
            description: "Too many HTTP requests with status 4xx (> 5%) on backend {{ $labels.fqdn }}/{{ $labels.backend }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        
        - alert: HaproxyHighHttp5xxErrorRateBackend
          expr: '((sum by (proxy) (rate(haproxy_server_http_responses_total{code="5xx"}[1m])) / sum by (proxy) (rate(haproxy_server_http_responses_total[1m]))) * 100) > 5'
          for: 1m
          labels:
            severity: critical
          annotations:
            summary: HAProxy high HTTP 5xx error rate backend (instance {{ $labels.instance }})
            description: "Too many HTTP requests with status 5xx (> 5%) on backend {{ $labels.fqdn }}/{{ $labels.backend }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        
        - alert: HaproxyHighHttp4xxErrorRateServer
          expr: '((sum by (server) (rate(haproxy_server_http_responses_total{code="4xx"}[1m])) / sum by (server) (rate(haproxy_server_http_responses_total[1m]))) * 100) > 5'
          for: 1m
          labels:
            severity: critical
          annotations:
            summary: HAProxy high HTTP 4xx error rate server (instance {{ $labels.instance }})
            description: "Too many HTTP requests with status 4xx (> 5%) on server {{ $labels.server }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        
        - alert: HaproxyHighHttp5xxErrorRateServer
          expr: '((sum by (server) (rate(haproxy_server_http_responses_total{code="5xx"}[1m])) / sum by (server) (rate(haproxy_server_http_responses_total[1m]))) * 100) > 5'
          for: 1m
          labels:
            severity: critical
          annotations:
            summary: HAProxy high HTTP 5xx error rate server (instance {{ $labels.instance }})
            description: "Too many HTTP requests with status 5xx (> 5%) on server {{ $labels.server }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        
        - alert: HaproxyServerResponseErrors
          expr: '(sum by (server) (rate(haproxy_server_response_errors_total[1m])) / sum by (server) (rate(haproxy_server_http_responses_total[1m]))) * 100 > 5'
          for: 1m
          labels:
            severity: critical
          annotations:
            summary: HAProxy server response errors (instance {{ $labels.instance }})
            description: "Too many response errors to {{ $labels.server }} server (> 5%).\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        
        - alert: HaproxyBackendConnectionErrors
          expr: '(sum by (proxy) (rate(haproxy_backend_connection_errors_total[1m]))) > 100'
          for: 1m
          labels:
            severity: critical
          annotations:
            summary: HAProxy backend connection errors (instance {{ $labels.instance }})
            description: "Too many connection errors to {{ $labels.fqdn }}/{{ $labels.backend }} backend (> 100 req/s). Request throughput may be too high.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        
        - alert: HaproxyServerConnectionErrors
          expr: '(sum by (proxy) (rate(haproxy_server_connection_errors_total[1m]))) > 100'
          for: 0m
          labels:
            severity: critical
          annotations:
            summary: HAProxy server connection errors (instance {{ $labels.instance }})
            description: "Too many connection errors to {{ $labels.server }} server (> 100 req/s). Request throughput may be too high.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        
        - alert: HaproxyBackendMaxActiveSession>80%
          expr: '((haproxy_server_max_sessions >0) * 100) / (haproxy_server_limit_sessions > 0) > 80'
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: HAProxy backend max active session > 80% (instance {{ $labels.instance }})
            description: "Session limit from backend {{ $labels.proxy }} to server {{ $labels.server }} reached 80% of limit - {{ $value | printf \"%.2f\"}}%\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        
        - alert: HaproxyPendingRequests
          expr: 'sum by (proxy) (rate(haproxy_backend_current_queue[2m])) > 0'
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: HAProxy pending requests (instance {{ $labels.instance }})
            description: "Some HAProxy requests are pending on {{ $labels.proxy }} - {{ $value | printf \"%.2f\"}}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        
        - alert: HaproxyHttpSlowingDown
          expr: 'avg by (instance, proxy) (haproxy_backend_max_total_time_seconds) > 1'
          for: 1m
          labels:
            severity: warning
          annotations:
            summary: HAProxy HTTP slowing down (instance {{ $labels.instance }})
            description: "Average request time is increasing - {{ $value | printf \"%.2f\"}}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        
        - alert: HaproxyRetryHigh
          expr: 'sum by (proxy) (rate(haproxy_backend_retry_warnings_total[1m])) > 10'
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: HAProxy retry high (instance {{ $labels.instance }})
            description: "High rate of retry on {{ $labels.proxy }} - {{ $value | printf \"%.2f\"}}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        
        - alert: HaproxyHasNoAliveBackends
          expr: 'haproxy_backend_active_servers + haproxy_backend_backup_servers == 0'
          for: 0m
          labels:
            severity: critical
          annotations:
            summary: HAproxy has no alive backends (instance {{ $labels.instance }})
            description: "HAProxy has no alive active or backup backends for {{ $labels.proxy }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        
        - alert: HaproxyFrontendSecurityBlockedRequests
          expr: 'sum by (proxy) (rate(haproxy_frontend_denied_connections_total[2m])) > 10'
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: HAProxy frontend security blocked requests (instance {{ $labels.instance }})
            description: "HAProxy is blocking requests for security reason\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        
        - alert: HaproxyServerHealthcheckFailure
          expr: 'increase(haproxy_server_check_failures_total[1m]) > 0'
          for: 1m
          labels:
            severity: warning
          annotations:
            summary: HAProxy server healthcheck failure (instance {{ $labels.instance }})
            description: "Some server healthcheck are failing on {{ $labels.server }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
