##  ____          _ _
## |  _ \ ___  __| (_)___
## | |_) / _ \/ _` | / __|
## |  _ <  __/ (_| | \__ \
## |_| \_\___|\__,_|_|___/
## 

## Redis - in-memory data structure store, used as a database, cache, and message broker
## https://redis.io/ + https://github.com/redis/redis
## https://hub.docker.com/_/redis + https://github.com/docker-library/redis
## Exporter: https://github.com/oliver006/redis_exporter

---

## volume (Recommended: Comment volume out after first run.)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data
  namespace: default
  labels:
    app: redis
spec:
  accessModes:
  - ReadWriteOnce
  volumeMode: Filesystem
  storageClassName: local-path # change or use: https://github.com/rancher/local-path-provisioner
  resources:
    requests:
      storage: 5Gi

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-env-config
  namespace: default
  labels:
    app: redis
data:
  TZ: "Europe/Berlin"

---

## convert string to base64 in Linux: "echo -n 'value' | base64"

apiVersion: v1
kind: Secret
metadata:
  name: redis-env-secret
  namespace: default
  labels:
    app: redis
data:
  REDIS_PASSWORD: cGFzc3cwcmQ=  # passw0rd

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: default
  labels:
    app: redis
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      #imagePullSecrets:
      #- name: regcred
      restartPolicy: Always
      containers:
      - name: redis
        image: redis:alpine
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: redis-env-config
        - secretRef:
            name: redis-env-secret
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
        args: ["sh", "-c", "exec redis-server --appendonly no --save 60 1000 --loglevel warning --requirepass $(REDIS_PASSWORD)"]
        #args: ["sh", "-c", "exec redis-server --appendonly no --save 60 1000 --loglevel warning"]
        readinessProbe:
          #tcpSocket:
          #  port: redis
          exec:
            command: ["/bin/sh", "-c", "exec redis-cli -h localhost --no-auth-warning -a ${REDIS_PASSWORD} ping"]
            #command: ["/bin/sh", "-c", "exec redis-cli -h localhost ping"]
          initialDelaySeconds: 15
          periodSeconds: 120
          timeoutSeconds: 5
          #failureThreshold: 4
          #successThreshold: 1
        livenessProbe:
          #tcpSocket:
          #  port: redis
          exec:
            command: ["/bin/sh", "-c", "exec redis-cli -h localhost --no-auth-warning -a ${REDIS_PASSWORD} ping"]
            #command: ["/bin/sh", "-c", "exec redis-cli -h localhost ping"]
          initialDelaySeconds: 30
          periodSeconds: 120
          timeoutSeconds: 5
          #failureThreshold: 4
          #successThreshold: 1
        resources:
          requests:
            memory: "128Mi"
            cpu: "0.1"
          limits:
            memory: "1Gi"
            cpu: "1.0"
        volumeMounts:
        - mountPath: /data
          name: redis-data
      - name: exporter
        image: oliver006/redis_exporter:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 9121
          name: exporter
          protocol: TCP
        env:
        - name: REDIS_PASSWORD  # defaults to "" (no password)
          valueFrom:
            secretKeyRef:
              name: redis-env-secret
              key: REDIS_PASSWORD
        ## https://github.com/oliver006/redis_exporter#command-line-flags
        args:
        - "--redis.addr=redis://localhost:6379"
        - "--redis.password=$(REDIS_PASSWORD)"
        #- "--skip-tls-verification=true"
        #- "--web.listen-address=:9121"
        #- "--web.telemetry-path=/metrics"
        #- "--debug=true"
        resources:
          requests:
            memory: "64Mi"
            cpu: "0.1"
          limits:
            memory: "256Mi"
            cpu: "0.5"
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data

---

apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: default
spec:
  type: ClusterIP    # default: "ClusterIP" , set to "NodePort" for access over external-ip (not recommended)
  ports:
    - name: "redis"
      protocol: TCP
      port: 6379
      targetPort: 6379
      #nodePort: 36379
    - name: "exporter"
      protocol: TCP
      port: 9121
      targetPort: 9121
  selector:
    app: redis

---

## After this line ONLY for Monitoring !

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: redis
  namespace: default
  labels:
    app: redis
spec:
  endpoints:
  - path: /metrics
    scheme: HTTP
    port: exporter # 9121
    targetPort: 9121
  selector:
    matchLabels:
      app: redis  # service

#--- 
#
### Examples: https://samber.github.io/awesome-prometheus-alerts/rules#redis
#
#apiVersion: monitoring.coreos.com/v1
#kind: PrometheusRule
#metadata:
#  name: redis
#  namespace: default
#  labels:
#    app: redis
#spec:
#  groups:
#    - name: redis.rules
#      rules:
      