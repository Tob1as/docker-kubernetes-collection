##  ____           _                 ____   ___  _          __  ____           _    ____ ___ ____
## |  _ \ ___  ___| |_ __ _ _ __ ___/ ___| / _ \| |        / / |  _ \ ___  ___| |_ / ___|_ _/ ___|
## | |_) / _ \/ __| __/ _` | '__/ _ \___ \| | | | |       / /  | |_) / _ \/ __| __| |  _ | |\___ \
## |  __/ (_) \__ \ || (_| | | |  __/___) | |_| | |___   / /   |  __/ (_) \__ \ |_| |_| || | ___) |
## |_|   \___/|___/\__\__, |_|  \___|____/ \__\_\_____| /_/    |_|   \___/|___/\__|\____|___|____/
##                    |___/

## PostgreSQL - object-relational database (SQL)
## https://www.postgresql.org/ + https://github.com/postgres/postgres + https://hub.docker.com/_/postgres
## https://postgis.net/ + https://github.com/postgis/postgis + https://hub.docker.com/r/postgis/postgis
## https://github.com/prometheus-community/postgres_exporter

---

## volume (Recommended: Comment volume out after first run.)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data
  namespace: default
  labels:
    app: postgres
spec:
  accessModes:
  - ReadWriteOnce
  volumeMode: Filesystem
  storageClassName: local-path # change or use: https://github.com/rancher/local-path-provisioner
  resources:
    requests:
      storage: 15Gi

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-env-config
  namespace: default
  labels:
    app: postgres
data:
  TZ: "Europe/Berlin"
  #POSTGRES_DB: "postgres"
  #PGDATA: "/var/lib/postgresql/data"

---

## convert string to base64 in Linux: "echo -n 'value' | base64"

apiVersion: v1
kind: Secret
metadata:
  name: postgres-env-secret
  namespace: default
  labels:
    app: postgres
data:
  #POSTGRES_USER: cG9zdGdyZXM=       # postgres
  POSTGRES_PASSWORD: cGFzc3cwcmQ=    # passw0rd
  EXPORTER_PASSWORD: RXhwMHJ0M3Ih    # Exp0rt3r!

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: default
  labels:
    app: postgres
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      #imagePullSecrets:
      #- name: regcred
      restartPolicy: Always
      containers:
      - name: postgres
        image: postgres:15-alpine
        #image: postgis/postgis:15-3.4-alpine
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: postgres-env-config
        - secretRef:
            name: postgres-env-secret
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        readinessProbe:
          exec:
            command: ["/bin/sh", "-c", "pg_isready -U postgres -h localhost -p 5432"]
          #tcpSocket:
          #  port: 5432
          initialDelaySeconds: 15
          periodSeconds: 120
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command: ["/bin/sh", "-c", "pg_isready -U postgres -h localhost -p 5432"]
          #tcpSocket:
          #  port: 3306
          initialDelaySeconds: 30
          periodSeconds: 120
          timeoutSeconds: 5
        resources:
          requests:
            memory: "128Mi"
            cpu: "0.1"
          limits:
            memory: "1Gi"
            cpu: "1.0"
        volumeMounts:
        - name: postgres-data
          subPath: data
          mountPath: /var/lib/postgresql/data/
        - name: postgres-db-file-sh-exporter
          subPath: 20_exporter-user.sh
          mountPath: /docker-entrypoint-initdb.d/20_exporter-user.sh
          readOnly: true
      - name: exporter
        image: prometheuscommunity/postgres-exporter:latest
        ports:
        - containerPort: 9187
          name: exporter
          protocol: TCP
        env:
        - name: EXPORTER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-env-secret
              key: EXPORTER_PASSWORD
        - name: DATA_SOURCE_NAME
          value: "postgresql://exporter:$(EXPORTER_PASSWORD)@localhost:5432/postgres?sslmode=disable"
        #- name: PG_EXPORTER_METRIC_PREFIX
        #  value: "pg"
        #- name: PG_EXPORTER_WEB_LISTEN_ADDRESS
        #  value: ":9187"
        #- name: PG_EXPORTER_WEB_TELEMETRY_PATH
        #  value: "/metrics"
        #args: ["--web.listen-address", ":9187", "--web.telemetry-path", "/metrics"]
        resources:
          requests:
            memory: "64Mi"
            cpu: "0.1"
          limits:
            memory: "256Mi"
            cpu: "0.5"
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data
        - name: postgres-db-file-sh-exporter
          configMap:
            name: postgres-db-file-sh-exporter
            defaultMode: 0755

---

# https://github.com/Tob1as/docker-kubernetes-collection/blob/master/examples_docker-compose/config_postgres/20_exporter-user.sh
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-db-file-sh-exporter
  namespace: default
  labels:
    app: postgres
data:
  20_exporter-user.sh: |-
    #!/bin/sh
    set -e
    
    : "${POSTGRES_USER:="postgres"}"
    
    : "${EXPORTER_USER:="exporter"}"
    : "${EXPORTER_PASSWORD:="Exp0rt3r!"}"
    
    # PostgreSQL versions >= 10  <https://github.com/prometheus-community/postgres_exporter#running-as-non-superuser>
    
    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" -tc \
    "SELECT 1 FROM pg_catalog.pg_user WHERE usename = '${EXPORTER_USER}'" \
    | grep -q 1 \
    || psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" <<EOSQL
    ---CREATE USER ${EXPORTER_USER};
    ---ALTER USER ${EXPORTER_USER} WITH PASSWORD '${EXPORTER_PASSWORD}';
    CREATE ROLE ${EXPORTER_USER} WITH LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT NOREPLICATION CONNECTION LIMIT -1 PASSWORD '${EXPORTER_PASSWORD}';
    ALTER USER ${EXPORTER_USER} SET SEARCH_PATH TO ${EXPORTER_USER},pg_catalog;
    GRANT CONNECT ON DATABASE postgres TO ${EXPORTER_USER};
    GRANT pg_monitor to ${EXPORTER_USER};
    EOSQL
    
    #psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" -c "SELECT * FROM pg_catalog.pg_user;"

---

apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: default
  labels:
    app: postgres
spec:
  type: ClusterIP    # default: "ClusterIP" , set to "NodePort" for access over external-ip (not recommended)
  ports:
  - name: "postgres"
    protocol: TCP
    port: 5432
    targetPort: 5432
    #nodePort: 35432
  - name: "exporter"
    protocol: TCP
    port: 9187
    targetPort: 9187
  selector:
    app: postgres

---

## After this line ONLY for Monitoring !

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: postgres
  namespace: default
  labels:
    app: postgres
spec:
  endpoints:
  - path: /metrics
    scheme: HTTP
    port: exporter # 9187
    targetPort: 9187
  selector:
    matchLabels:
      app: postgres  # service

#--- 
#
### Examples: https://samber.github.io/awesome-prometheus-alerts/rules#postgresql
#
#apiVersion: monitoring.coreos.com/v1
#kind: PrometheusRule
#metadata:
#  name: postgres
#  namespace: default
#  labels:
#    app: postgres
#spec:
#  groups:
#    - name: postgres.rules
#      rules:
      