##  _   _  ____ ___ _   ___  __           ___                   ____ ____  _   _
## | \ | |/ ___|_ _| \ | \ \/ /    _     / _ \ _ __   ___ _ __ / ___/ ___|| | | |
## |  \| | |  _ | ||  \| |\  /   _| |_  | | | | '_ \ / _ \ '_ \\___ \___ \| |_| |
## | |\  | |_| || || |\  |/  \  |_   _| | |_| | |_) |  __/ | | |___) |__) |  _  |
## |_| \_|\____|___|_| \_/_/\_\   |_|    \___/| .__/ \___|_| |_|____/____/|_| |_|
##                                            |_|

## NGINX - web server, proxy server, load balancer and more
## https://nginx.org/ + https://github.com/nginx/nginx
## https://hub.docker.com/_/nginx + https://github.com/nginxinc/docker-nginx
## Alternative: https://hub.docker.com/r/nginxinc/nginx-unprivileged & https://github.com/nginxinc/docker-nginx-unprivileged (replace port 80 with 8080)
## Exporter: https://github.com/nginxinc/nginx-prometheus-exporter

## OpenSSH - connectivity tool for remote login with the SSH protocol
## https://www.openssh.com/
## https://github.com/linuxserver/docker-openssh-server + https://hub.docker.com/r/linuxserver/openssh-server

## ======= WARNING =======
## This setup is not recommended in a productive environment!
## If you want to copy files (website data) into a running NGINX container volume, it is recommended to use the "kubectl cp" command.
## ======= WARNING =======

---

## volume (Recommended: Comment volume out after first run.)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: website-nginx-data
  namespace: default
  labels:
    app: website
spec:
  accessModes:
  - ReadWriteOnce
  volumeMode: Filesystem
  storageClassName: local-path # change or use: https://github.com/rancher/local-path-provisioner
  resources:
    requests:
      storage: 5Gi

---

## volume (Recommended: Comment volume out after first run.)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: website-openssh-data
  namespace: default
  labels:
    app: website
spec:
  accessModes:
  - ReadWriteOnce
  volumeMode: Filesystem
  storageClassName: local-path # change or use: https://github.com/rancher/local-path-provisioner
  resources:
    requests:
      storage: 256Mi

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: website-openssh-env-config
  namespace: default
  labels:
    app: website
data:
  TZ: "Europe/Berlin"
  PUID: "101"              # default: 1000 ; 101 for offical nginx image (path: /usr/share/nginx/html) see https://bit.ly/3f9x0CE ; php image (www-data) 33 for debian and 82 for alpine (path: /var/www/html) 
  PGID: "101"              # (see above) 
  SUDO_ACCESS: "false"     # default: false
  PASSWORD_ACCESS: "true"  # default: false, set true when not use SSH-KEY
  #PUBLIC_KEY_FILE: "/path/to/file"
  #PUBLIC_KEY_DIR: "/path/to/directory/containing/_only_/pubkeys"
  #PUBLIC_KEY_URL: "https://github.com/username.keys"
  #USER_PASSWORD_FILE: "/path/to/file"
  LOG_STDOUT: "true"

--- 

## convert string to base64 in Linux: "echo -n 'value' | base64"

apiVersion: v1
kind: Secret
metadata:
  name: website-openssh-env-secret
  namespace: default
  labels:
    app: website
data:
  #PUBLIC_KEY:                   # ssh-rsa AAAA*******== user@host
  USER_NAME: YWRtaW4=            # admin
  USER_PASSWORD: cGFzc3cwcmQ=    # passw0rd

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: website-nginx-env-config
  namespace: default
  labels:
    app: website
data:
  TZ: "Europe/Berlin"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: website
  namespace: tobias
  labels:
    app: website
  #annotations: {}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: website
  template:
    metadata:
      labels:
        app: website
      #annotations: {}
    spec:
      #imagePullSecrets:
      #- name: regcred
      #hostname: website
      restartPolicy: Always
      securityContext:
        fsGroup: 101    # nginx user (see comment for PUID)
      containers:
      - name: nginx
        image: nginx:alpine
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: website-nginx-env-config
        #- secretRef:
        #    name: website-nginx-env-secret
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        resources:
          requests:
            memory: "128Mi"
            cpu: "0.1"
          limits:
            memory: "1Gi"
            cpu: "1.0"
        volumeMounts:
        - name: website-data
          mountPath: /usr/share/nginx/html
        - name: website-nginx-defaultconf-file-config
          subPath: default.conf
          mountPath: /etc/nginx/conf.d/default.conf
          #readOnly: true
        - name: website-nginx-index-file-config
          subPath: index.html
          mountPath: /usr/share/nginx/html/index.html
          #readOnly: true
        readinessProbe:
          httpGet:
            path: /nginx_status
            port: 80
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 120
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /nginx_status
            port: 80
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 120
          timeoutSeconds: 5
      - name: nginx-exporter
        image: nginx/nginx-prometheus-exporter:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 9113
          name: exporter
          protocol: TCP
        args:
        - '-nginx.scrape-uri=http://localhost:80/nginx_status'  # need stub_status page
        #- '-nginx.ssl-verify=false'
        #- '-web.listen-address=:9113'
        #- '-web.telemetry-path=/metrics'
        resources:
          requests:
            memory: "64Mi"
            cpu: "0.1"
          limits:
            memory: "256Mi"
            cpu: "0.5"
      - name: openssh
        #image: ghcr.io/linuxserver/openssh-server:latest
        image: linuxserver/openssh-server:latest
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: website-openssh-env-config
        - secretRef:
            name: website-openssh-env-secret
        ports:
        - containerPort: 2222
          name: ssh
          protocol: TCP
        resources:
          requests:
            memory: "128Mi"
            cpu: "0.1"
          limits:
            memory: "512Mi"
            cpu: "0.5"
        volumeMounts:
        - name: website-nginx-data
          mountPath: /usr/share/nginx/html
        - name: website-openssh-data
          mountPath: /config
        - name: website-openssh-file-bashprofile
          subPath: .bash_profile
          mountPath: /config/.bash_profile
          readOnly: true
        - name: openssh-server-portforwarding
          subPath: 10-sshd_portforwarding.sh
          mountPath: /config/custom-cont-init.d/10-sshd_portforwarding.sh
          readOnly: true
      initContainers:
      - name: volume-mount-chmod
        image: busybox
        command: ["sh", "-c", "mkdir -p /usr/share/nginx/html; chmod 777 /usr/share/nginx/html; mkdir -p /config; chmod 777 /config; exit"]
        volumeMounts:
        - name: website-nginx-data
          mountPath: /usr/share/nginx/html
        - name: website-openssh-data
          mountPath: /config
        resources:
          requests:
            memory: "128Mi"
            cpu: "0.1"
          limits:
            memory: "256Mi"
            cpu: "0.5"
      volumes:
      # data volumes:
      - name: website-nginx-data
        persistentVolumeClaim:
          claimName: website-nginx-data
      - name: website-openssh-data
        persistentVolumeClaim:
          claimName: website-openssh-data
      # config files:
      - name: website-nginx-index-file-config
        configMap:
          name: website-nginx-index-file-config
          optional: true
      - name: website-nginx-defaultconf-file-config
        configMap:
          name: website-nginx-defaultconf-file-config
          #optional: true
      - name: website-openssh-file-bashprofile
        configMap:
          name: website-openssh-file-bashprofile
      - name: website-openssh-file-portforwarding
        configMap:
          name: website-openssh-file-portforwarding
          defaultMode: 0777
          optional: true

#---
#
### optional: index.html in /usr/share/nginx/html for website (nginx)
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: website-nginx-index-file-config
#  namespace: default
#  labels:
#    app: website
#data:
#  index.html: |-
#    <html>
#      <head>
#        <title>NGINX Website by K8s</title>
#      </head>
#      <body>
#        <p>Hello :-)</p>
#      </body>
#    </html>

---

## example default.conf: https://github.com/Tob1as/docker-kubernetes-collection/blob/master/examples_docker-compose/config_nginx/conf.d/default.conf
apiVersion: v1
kind: ConfigMap
metadata:
  name: website-nginx-defaultconf-file-config
  namespace: default
  labels:
    app: website
data:
  default.conf: |-
    # enable ONLY behind PROXY (Traefik, NGINX, Caddy, lighttpd, K8s Ingress, ...) (ngx_http_realip_module)
    set_real_ip_from 10.42.0.0/16;
    set_real_ip_from 10.43.0.0/16;
    set_real_ip_from 2001:cafe:42:0::/56;
    set_real_ip_from 2001:cafe:42:1::/112;
    real_ip_header X-Forwarded-For;
    #real_ip_recursive on;
    
    server {
        listen 80;
        listen [::]:80;
        server_name _;
        
        # disable any limits to avoid HTTP 413 for large image uploads
        client_max_body_size 0;
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow ::1;
            allow 10.42.0.0/16;
            allow 10.43.0.0/16;
            deny all;
        }
        
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            #autoindex on;  # list files in directory
        }
    	#location /test {
    	#	 return 200 'NGINX Works :-)';
        #    add_header Content-Type text/plain;
        #} 
    }

---

## .bash_profile in /config/ for openssh user (change dir to html when login)
## https://serverfault.com/a/499566/479163

apiVersion: v1
kind: ConfigMap
metadata:
  name: website-openssh-file-bashprofile
  namespace: default
  labels:
    app: website
data:
  .bash_profile: |-
    cd /usr/share/nginx/html/

#---
#
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: website-openssh-file-portforwarding
#  namespace: default
#  labels:
#    app: website
#data:
#  sshd_portforwarding.sh: |-
#    #!/bin/sh
#    
#    set -eu
#    
#    SSHD_CONF_FILE="/etc/ssh/sshd_config"
#    
#    # https://www.cyberciti.biz/faq/unix-linux-check-if-port-is-in-use-command/
#    # https://www.ssh.com/academy/ssh/tunneling/example
#    echo ">> Enable PortForwarding"
#    sed -i "s|AllowTcpForwarding.*|AllowTcpForwarding yes|g" ${SSHD_CONF_FILE}
#    sed -i "s|GatewayPorts.*|GatewayPorts yes|g" ${SSHD_CONF_FILE}

---

apiVersion: v1
kind: Service
metadata:
  name: website-nginx
  namespace: default
  labels:
    app: website
    exporter: nginx
spec:
  type: ClusterIP    # default: "ClusterIP" , set to "NodePort" for access over external-ip (not recommended)
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 80
  - name: https
    protocol: TCP
    port: 443
    targetPort: 443
  - name: exporter
    protocol: TCP
    port: 9113
    targetPort: 9113
  selector:
    app: website

---

apiVersion: v1
kind: Service
metadata:
  name: website-openssh
  namespace: default
  labels:
    app: website
    #exporter: openssh
spec:
  type: NodePort    # "NodePort" for access over external-ip
  ports:
  - name: openssh
    protocol: TCP
    port: 2222
    targetPort: 2222
    #nodePort: 32222
  selector:
    app: website

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-website
  namespace: default
  labels:
    app: website
  annotations:
    kubernetes.io/ingress.class: nginx
    #nginx.ingress.kubernetes.io/ssl-redirect: "false"
    #nginx.ingress.kubernetes.io/rewrite-target: /$1
    #nginx.ingress.kubernetes.io/proxy-body-size: "0"
    #nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    ## https://cert-manager.io/docs/
    #cert-manager.io/cluster-issuer: ingress-tls-secret
    #cert-manager.io/acme-challenge-type: http01
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - website.example.com
    secretName: ingress-tls-secret
  rules:
  - host: website.example.com
    http:
      paths:
      - path: /
        pathType: ImplementationSpecific
        backend:
          service:
            name: website-nginx
            port:
              #name: http
              number: 80

---

## After this line ONLY for Monitoring !

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: website-nginx
  namespace: default
  labels:
    app: website
spec:
  endpoints:
  - path: /metrics
    scheme: HTTP
    port: exporter # 9113
    targetPort: 9113
  selector:
    matchLabels:
      app: website  # service
      exporter: nginx
