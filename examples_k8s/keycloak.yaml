##  _  __               _             _
## | |/ /___ _   _  ___| | ___   __ _| | __
## | ' // _ \ | | |/ __| |/ _ \ / _` | |/ /
## | . \  __/ |_| | (__| | (_) | (_| |   <
## |_|\_\___|\__, |\___|_|\___/ \__,_|_|\_\
##           |___/

## Keycloak - identity and access management solution
## https://www.keycloak.org/
## https://github.com/keycloak/keycloak
## https://hub.docker.com/r/jboss/keycloak + https://github.com/keycloak/keycloak/tree/main/quarkus/container
## Docs:
## * https://www.keycloak.org/guides + https://www.keycloak.org/documentation
## * Container: https://www.keycloak.org/server/containers
## * All configuration: https://www.keycloak.org/server/all-config
## * Features: https://www.keycloak.org/server/features
## Requirements: setup database (mariadb or other database) before start keycloak!

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-env-config
  namespace: default
  labels:
    app: keycloak
data:
  #TZ: Europe/Berlin
  # Database OR import in deployment from Database secret
  KC_DB: "mariadb"                                 # or postgres or other db ...
  KC_DB_URL: "jdbc:mariadb://mariadb/keycloak" # jdbc:postgresql://postgres/keycloak
  # Feature
  #KC_FEATURES: ""
  #KC_FEATURES_DISABLED: ""
  # Hostname
  #KC_HOSTNAME: "example.com"  # or set KC_HOSTNAME_URL
  KC_HOSTNAME_URL: "https://example.com/auth"
  # Proxy
  KC_PROXY: "edge"
  # HTTP/TLS
  KC_HTTP_RELATIVE_PATH: "/auth"  # default: "/"
  KC_HTTP_ENABLED: "true"         # default: false, but we use this for Proxy
  KC_HTTP_PORT: "8080"
  #KC_HTTPS_PORT: "8443"
  #KC_HTTPS_CERTIFICATE_FILE: "/ssl/ssl.crt"      # or use KC_HTTPS_KEY_STORE_FILE
  #KC_HTTPS_CERTIFICATE_KEY_FILE: "/ssl/ssl.key"
  #KC_HTTPS_KEY_STORE_FILE: "/ssl/keystore.jks"   # or use KC_HTTPS_CERTIFICATE_FILE
  #KC_HTTPS_CIPHER_SUITES: ""
  #KC_HTTPS_PROTOCOLS: "TLSv1.3,TLSv1.2"
  #KC_HTTPS_TRUST_STORE_FILE: "/ssl/cacerts.jks"
  #KC_HTTPS_TRUST_STORE_TYPE: "jks"
  # Healt & Metrics
  KC_HEALTH_ENABLED: "true"   # /auth/health
  KC_METRICS_ENABLED: "true"  # /auth/metrics
  # Logging
  KC_LOG_LEVEL: "info"
  # JAVA_OPTS
  #JAVA_OPTS_APPEND: "-Xms64m -Xmx512m -Djava.******"

---

## convert string to base64 in Linux: "echo -n 'value' | base64"

apiVersion: v1
kind: Secret
metadata:
  name: keycloak-env-secret
  namespace: default
  labels:
    app: keycloak
data:
  # Admin User
  KEYCLOAK_ADMIN: YWRtaW4=                     # admin
  KEYCLOAK_ADMIN_PASSWORD: cGFzc3cwcmQ=        # passw0rd
  # Database (OR import in deployment from Database secret)
  KC_DB_USERNAME: a2V5Y2xvYWs=                 # keycloak
  KC_DB_PASSWORD: cGFzc3cwcmQ=                 # passw0rd
  # HTTP/TLS
  #KC_HTTPS_KEY_STORE_PASSWORD: cGFzc3cwcmQ=   # passw0rd
  #KC_HTTPS_TRUST_STORE_PASSWORD: Y2hhbmdlaXQ= # changeit

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  namespace: default
  labels:
    app: keycloak
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      #imagePullSecrets:
      #- name: regcred
      securityContext:
        fsGroup: 1000
      restartPolicy: Always
      containers:
      - name: keycloak
        image: quay.io/keycloak/keycloak:22.0
        #image: keycloak/keycloak:22.0
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: keycloak-env-config
        - secretRef:
            name: keycloak-env-secret
        ## Beginning: import from Database secret ##
        #env:
        #- name: KC_DB_USERNAME
        #  valueFrom:
        #    secretKeyRef:
        #      name: mariadb-env-secret
        #      key: MARIADB_USER
        #- name: KC_DB_PASSWORD
        #  valueFrom:
        #    secretKeyRef:
        #      name: mariadb-env-secret
        #      key: MARIADB_PASSWORD
        #- name: DATABASE_NAME
        #  valueFrom:
        #    configMapKeyRef:
        #      name: mariadb-env-config
        #      key: MARIADB_DATABASE
        #- name: KC_DB_URL
        #  value: "jdbc:mariadb://mariadb/$(DATABASE_NAME)"
        ## END: import from Database secret ##
        args: ["start"]
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8443
          name: https
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /auth/health/ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 120
          timeoutSeconds: 3
          #failureThreshold: 4
          #successThreshold: 1
        livenessProbe:
          httpGet:
            path: /auth/health/live
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 120
          timeoutSeconds: 3
          #failureThreshold: 4
          #successThreshold: 1
        resources:
          requests:
            memory: "64Mi"
            cpu: "0.1"
          limits:
            memory: "512Mi"
            cpu: "1.0"
        volumeMounts:
        - name: cacerts-jks
          subPath: cacerts.jks
          mountPath: /ssl/cacerts.jks
          readOnly: true
        - name: keycloak-ssl
          subPath: ssl.crt
          mountPath: /ssl/ssl.crt
          readOnly: true
        - name: keycloak-ssl
          subPath: ssl.key
          mountPath: /ssl/ssl.key
          readOnly: true
      volumes:
      - name: cacerts-jks
        secret:
          secretName: cacerts-jks
          defaultMode: 420 # decimal equivalent of octal 0644
          optional: true
      - name: keycloak-ssl
        secret:
          secretName: keycloak-ssl-secret
          defaultMode: 420 # decimal equivalent of octal 0644
          optional: true

#---
#
### help to convert to base64: https://github.com/Tob1as/docker-kubernetes-collection/blob/master/examples_k8s/ca-files-secret.yaml#L8-L14
#apiVersion: v1
#kind: Secret
#metadata:
#  name: keycloak-ssl-secret
#  namespace: default
#  labels:
#    app: keycloak
#type: Opaque
#data:
#  ssl.crt: <ssl.crt>
#  ssl.key: <ssl.key>

---

apiVersion: v1
kind: Service
metadata:
  name: keycloak
  namespace: default
  labels:
    app: keycloak
spec:
  type: ClusterIP    # default: "ClusterIP" , set to "NodePort" for access over external-ip (not recommended)
  ports:
    - name: "http"
      protocol: TCP
      port: 8080
      targetPort: 8080
    - name: "https"
      protocol: TCP
      port: 8443
      targetPort: 8443
  selector:
    app: keycloak

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: keycloak
  namespace: default
  labels:
    app: keycloak
  annotations:
    kubernetes.io/ingress.class: nginx
    #nginx.ingress.kubernetes.io/ssl-redirect: "false"
    #nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-buffer-size: 16k
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "4"
spec:
  tls:
  - hosts:
    - example.com
    secretName: ingress-tls-secret
  rules:
  - host: example.com
    http:
      paths:
      - path: /auth               # https://example.com/auth/
        pathType: Prefix
        backend:
          service:
            name: keycloak
            port:
              #name: http
              number: 8080
       
---

# secure metric url
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: keycloak-metrics
  namespace: default
  labels:
    app: keycloak
  annotations:
    kubernetes.io/ingress.class: nginx
    #nginx.ingress.kubernetes.io/ssl-redirect: "false"
    #nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    #nginx.ingress.kubernetes.io/proxy-buffer-size: 16k
    #nginx.ingress.kubernetes.io/proxy-buffering: "on"
    #nginx.ingress.kubernetes.io/proxy-buffers-number: "4"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Keycloak'
spec:
  tls:
  - hosts:
    - example.com
    secretName: ingress-tls-secret
  rules:
  - host: example.com
    http:
      paths:
      - path: /auth/metrics
        pathType: Exact
        backend:
          service:
            name: keycloak
            port:
              #name: http
              number: 8080
      - path: /auth/health
        pathType: Prefix
        backend:
          service:
            name: keycloak
            port:
              #name: http
              number: 8080

---

## After this line ONLY for Monitoring !

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: keycloak
  namespace: default
  labels:
    app: keycloak
spec:
  endpoints:
  - path: /auth/metrics
    scheme: HTTP
    port: http # 8080
    targetPort: 8080
  selector:
    matchLabels:
      app: keycloak  # service

#--- 
#
#apiVersion: monitoring.coreos.com/v1
#kind: PrometheusRule
#metadata:
#  name: keycloak
#  namespace: default
#  labels:
#    app: keycloak
#spec:
#  groups:
#    - name: keycloak.rules
#      rules: