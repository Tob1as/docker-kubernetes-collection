##  _____ _                               _      ____  ____
## |_   _(_)_ __ ___   ___  ___  ___ __ _| | ___|  _ \| __ )
##   | | | | '_ ` _ \ / _ \/ __|/ __/ _` | |/ _ \ | | |  _ \
##   | | | | | | | | |  __/\__ \ (_| (_| | |  __/ |_| | |_) |
##   |_| |_|_| |_| |_|\___||___/\___\__,_|_|\___|____/|____/
## 
##  based on PostgreSQL

## TimescaleDB - PostgreSQL++ for time series and events
## https://www.timescale.com/ + https://github.com/timescale/timescaledb-docker-ha + https://hub.docker.com/r/timescale/timescaledb-ha
## https://github.com/prometheus-community/postgres_exporter

---

## volume (Recommended: Comment volume out after first run.)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-timescaledb-data
  namespace: default
  labels:
    app: postgres-timescaledb
spec:
  accessModes:
  - ReadWriteOnce
  volumeMode: Filesystem
  storageClassName: local-path # change or use: https://github.com/rancher/local-path-provisioner
  resources:
    requests:
      storage: 15Gi

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-timescaledb-env-config
  namespace: default
  labels:
    app: postgres-timescaledb
data:
  TZ: "Europe/Berlin"
  #POSTGRES_DB: "postgres"
  #PGDATA: "/home/postgres/pgdata/data"

---

## convert string to base64 in Linux: "echo -n 'value' | base64"

apiVersion: v1
kind: Secret
metadata:
  name: postgres-timescaledb-env-secret
  namespace: default
  labels:
    app: postgres-timescaledb
data:
  #POSTGRES_USER: cG9zdGdyZXM=       # postgres
  POSTGRES_PASSWORD: cGFzc3cwcmQ=    # passw0rd
  EXPORTER_PASSWORD: RXhwMHJ0M3Ih    # Exp0rt3r!

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-timescaledb
  namespace: default
  labels:
    app: postgres-timescaledb
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: postgres-timescaledb
  template:
    metadata:
      labels:
        app: postgres-timescaledb
    spec:
      #imagePullSecrets:
      #- name: regcred
      restartPolicy: Always
      containers:
      - name: timescaledb
        image: timescale/timescaledb-ha:pg15-latest
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: postgres-timescaledb-env-config
        - secretRef:
            name: postgres-timescaledb-env-secret
        ports:
        - containerPort: 5432
          name: timescaledb
          protocol: TCP
        readinessProbe:
          exec:
            command: ["/bin/sh", "-c", "pg_isready -U postgres -h localhost -p 5432"]
          #tcpSocket:
          #  port: 5432
          initialDelaySeconds: 15
          periodSeconds: 120
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command: ["/bin/sh", "-c", "pg_isready -U postgres -h localhost -p 5432"]
          #tcpSocket:
          #  port: 3306
          initialDelaySeconds: 30
          periodSeconds: 120
          timeoutSeconds: 5
        resources:
          requests:
            memory: "128Mi"
            cpu: "0.1"
          limits:
            memory: "1Gi"
            cpu: "1.0"
        volumeMounts:
        - name: postgres-timescaledb-data
          #subPath: data
          mountPath: /home/postgres/pgdata/  # not working: /home/postgres/pgdata/data
        - name: postgres-timescaledb-db-file-sh-exporter
          subPath: 20_exporter-user.sh
          mountPath: /docker-entrypoint-initdb.d/20_exporter-user.sh
          readOnly: true
      - name: exporter
        image: prometheuscommunity/postgres-exporter:latest
        ports:
        - containerPort: 9187
          name: exporter
          protocol: TCP
        env:
        - name: EXPORTER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-env-secret
              key: EXPORTER_PASSWORD
        - name: DATA_SOURCE_NAME
          value: "postgresql://exporter:$(EXPORTER_PASSWORD)@localhost:5432/postgres?sslmode=disable"
        #- name: PG_EXPORTER_METRIC_PREFIX
        #  value: "pg"
        #- name: PG_EXPORTER_WEB_LISTEN_ADDRESS
        #  value: ":9187"
        #- name: PG_EXPORTER_WEB_TELEMETRY_PATH
        #  value: "/metrics"
        #args: ["--web.listen-address", ":9187", "--web.telemetry-path", "/metrics"]
        resources:
          requests:
            memory: "64Mi"
            cpu: "0.1"
          limits:
            memory: "256Mi"
            cpu: "0.5"
      volumes:
        - name: postgres-timescaledb-data
          persistentVolumeClaim:
            claimName: postgres-timescaledb-data
        - name: postgres-timescaledb-db-file-sh-exporter
          configMap:
            name: postgres-db-file-sh-exporter

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-db-file-sh-exporter
  namespace: default
  labels:
    app: postgres
data:
  20_exporter-user.sh: |-
    #!/bin/sh
    set -e
    
    : "${POSTGRES_USER:="postgres"}"
    
    : "${EXPORTER_USER:="exporter"}"
    : "${EXPORTER_PASSWORD:="Exp0rt3r!"}"
    
    # PostgreSQL versions >= 10  <https://github.com/prometheus-community/postgres_exporter#running-as-non-superuser>
    
    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" -tc \
    "SELECT 1 FROM pg_catalog.pg_user WHERE usename = '${EXPORTER_USER}'" \
    | grep -q 1 \
    || psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" <<EOSQL
    ---CREATE USER ${EXPORTER_USER};
    ---ALTER USER ${EXPORTER_USER} WITH PASSWORD '${EXPORTER_PASSWORD}';
    CREATE ROLE ${EXPORTER_USER} WITH LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT NOREPLICATION CONNECTION LIMIT -1 PASSWORD '${EXPORTER_PASSWORD}';
    ALTER USER ${EXPORTER_USER} SET SEARCH_PATH TO ${EXPORTER_USER},pg_catalog;
    GRANT CONNECT ON DATABASE postgres TO ${EXPORTER_USER};
    GRANT pg_monitor to ${EXPORTER_USER};
    EOSQL
    
    #psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" -c "SELECT * FROM pg_catalog.pg_user;"

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-timescaledb
  namespace: default
  labels:
    app: postgres-timescaledb
spec:
  type: ClusterIP    # default: "ClusterIP" , set to "NodePort" for access over external-ip (not recommended)
  ports:
    - name: "timescaledb"
      protocol: TCP
      port: 5432
      targetPort: 5432
      #nodePort: 35432
    - name: "exporter"
      protocol: TCP
      port: 9187
      targetPort: 9187
  selector:
    app: postgres-timescaledb

---

## After this line ONLY for Monitoring !

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: postgres-timescaledb
  namespace: default
  labels:
    app: postgres-timescaledb
spec:
  endpoints:
  - path: /metrics
    scheme: HTTP
    port: exporter # 9187
    targetPort: 9187
    #metricRelabelings:
  selector:
    matchLabels:
      app: postgres-timescaledb  # service

--- 

# Examples: https://samber.github.io/awesome-prometheus-alerts/rules#postgresql

apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: postgres
  namespace: default
  labels:
    app: postgres
spec:
  groups:
    - name: postgres.rules
      rules:
      
      # 2.2.1. Postgresql down 
      - alert: PostgresqlDown
        expr: 'pg_up == 0'
        for: 0m
        labels:
          severity: critical
        annotations:
          summary: Postgresql down (instance {{ $labels.instance }})
          description: "Postgresql instance is down\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      
      # 2.2.2. Postgresql restarted 
      - alert: PostgresqlRestarted
        expr: 'time() - pg_postmaster_start_time_seconds < 60'
        for: 0m
        labels:
          severity: critical
        annotations:
          summary: Postgresql restarted (instance {{ $labels.instance }})
          description: "Postgresql restarted\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      
      # 2.2.3. Postgresql exporter error 
      - alert: PostgresqlExporterError
        expr: 'pg_exporter_last_scrape_error > 0'
        for: 0m
        labels:
          severity: critical
        annotations:
          summary: Postgresql exporter error (instance {{ $labels.instance }})
          description: "Postgresql exporter is showing errors. A query may be buggy in query.yaml\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      
      # 2.2.4. Postgresql table not auto vacuumed 
      - alert: PostgresqlTableNotAutoVacuumed
        expr: '(pg_stat_user_tables_last_autovacuum > 0) and (time() - pg_stat_user_tables_last_autovacuum) > 60 * 60 * 24 * 10'
        for: 0m
        labels:
          severity: warning
        annotations:
          summary: Postgresql table not auto vacuumed (instance {{ $labels.instance }})
          description: "Table {{ $labels.relname }} has not been auto vacuumed for 10 days\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      
      # 2.2.5. Postgresql table not auto analyzed 
      - alert: PostgresqlTableNotAutoAnalyzed
        expr: '(pg_stat_user_tables_last_autoanalyze > 0) and (time() - pg_stat_user_tables_last_autoanalyze) > 24 * 60 * 60 * 10'
        for: 0m
        labels:
          severity: warning
        annotations:
          summary: Postgresql table not auto analyzed (instance {{ $labels.instance }})
          description: "Table {{ $labels.relname }} has not been auto analyzed for 10 days\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      
      # 2.2.6. Postgresql too many connections
      - alert: PostgresqlTooManyConnections
        expr: 'sum by (instance, job, server) (pg_stat_activity_count) > min by (instance, job, server) (pg_settings_max_connections * 0.8)'
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: Postgresql too many connections (instance {{ $labels.instance }})
          description: "PostgreSQL instance has too many connections (> 80%).\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      
      # 2.2.7. Postgresql not enough connections
      - alert: PostgresqlNotEnoughConnections
        expr: 'sum by (datname) (pg_stat_activity_count{datname!~"template.*|postgres"}) < 5'
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: Postgresql not enough connections (instance {{ $labels.instance }})
          description: "PostgreSQL instance should have more connections (> 5)\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      
      # 2.2.8. Postgresql dead locks 
      - alert: PostgresqlDeadLocks
        expr: 'increase(pg_stat_database_deadlocks{datname!~"template.*|postgres"}[1m]) > 5'
        for: 0m
        labels:
          severity: warning
        annotations:
          summary: Postgresql dead locks (instance {{ $labels.instance }})
          description: "PostgreSQL has dead-locks\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      
      # 2.2.9. Postgresql high rollback rate 
      - alert: PostgresqlHighRollbackRate
        expr: 'sum by (namespace,datname) ((rate(pg_stat_database_xact_rollback{datname!~"template.*|postgres",datid!="0"}[3m])) / ((rate(pg_stat_database_xact_rollback{datname!~"template.*|postgres",datid!="0"}[3m])) + (rate(pg_stat_database_xact_commit{datname!~"template.*|postgres",datid!="0"}[3m])))) > 0.02'
        for: 0m
        labels:
          severity: warning
        annotations:
          summary: Postgresql high rollback rate (instance {{ $labels.instance }})
          description: "Ratio of transactions being aborted compared to committed is > 2 %\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      
      # 2.2.10. Postgresql commit rate low
      - alert: PostgresqlCommitRateLow
        expr: 'rate(pg_stat_database_xact_commit[1m]) < 10'
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: Postgresql commit rate low (instance {{ $labels.instance }})
          description: "Postgresql seems to be processing very few transactions\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      
      # 2.2.11. Postgresql low XID consumption 
      - alert: PostgresqlLowXidConsumption
        expr: 'rate(pg_txid_current[1m]) < 5'
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: Postgresql low XID consumption (instance {{ $labels.instance }})
          description: "Postgresql seems to be consuming transaction IDs very slowly\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      
      # 2.2.12. Postgresql high rate statement timeout 
      - alert: PostgresqlHighRateStatementTimeout
        expr: 'rate(postgresql_errors_total{type="statement_timeout"}[1m]) > 3'
        for: 0m
        labels:
          severity: critical
        annotations:
          summary: Postgresql high rate statement timeout (instance {{ $labels.instance }})
          description: "Postgres transactions showing high rate of statement timeouts\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      
      # 2.2.13. Postgresql high rate deadlock 
      - alert: PostgresqlHighRateDeadlock
        expr: 'increase(postgresql_errors_total{type="deadlock_detected"}[1m]) > 1'
        for: 0m
        labels:
          severity: critical
        annotations:
          summary: Postgresql high rate deadlock (instance {{ $labels.instance }})
          description: "Postgres detected deadlocks\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      
      # 2.2.14. Postgresql unused replication slot 
      - alert: PostgresqlUnusedReplicationSlot
        expr: 'pg_replication_slots_active == 0'
        for: 1m
        labels:
          severity: warning
        annotations:
          summary: Postgresql unused replication slot (instance {{ $labels.instance }})
          description: "Unused Replication Slots\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      
      # 2.2.15. Postgresql too many dead tuples
      - alert: PostgresqlTooManyDeadTuples
        expr: '((pg_stat_user_tables_n_dead_tup > 10000) / (pg_stat_user_tables_n_live_tup + pg_stat_user_tables_n_dead_tup)) >= 0.1'
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: Postgresql too many dead tuples (instance {{ $labels.instance }})
          description: "PostgreSQL dead tuples is too large\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      
      # 2.2.16. Postgresql configuration changed 
      - alert: PostgresqlConfigurationChanged
        expr: '{__name__=~"pg_settings_.*"} != ON(__name__) {__name__=~"pg_settings_([^t]|t[^r]|tr[^a]|tra[^n]|tran[^s]|trans[^a]|transa[^c]|transac[^t]|transact[^i]|transacti[^o]|transactio[^n]|transaction[^_]|transaction_[^r]|transaction_r[^e]|transaction_re[^a]|transaction_rea[^d]|transaction_read[^_]|transaction_read_[^o]|transaction_read_o[^n]|transaction_read_on[^l]|transaction_read_onl[^y]).*"} OFFSET 5m'
        for: 0m
        labels:
          severity: info
        annotations:
          summary: Postgresql configuration changed (instance {{ $labels.instance }})
          description: "Postgres Database configuration change has occurred\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      
      # 2.2.17. Postgresql SSL compression active
      - alert: PostgresqlSslCompressionActive
        expr: 'sum(pg_stat_ssl_compression) > 0'
        for: 0m
        labels:
          severity: critical
        annotations:
          summary: Postgresql SSL compression active (instance {{ $labels.instance }})
          description: "Database connections with SSL compression enabled. This may add significant jitter in replication delay. Replicas should turn off SSL compression via `sslcompression=0` in `recovery.conf`.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      
      # 2.2.18. Postgresql too many locks acquired
      - alert: PostgresqlTooManyLocksAcquired
        expr: '((sum (pg_locks_count)) / (pg_settings_max_locks_per_transaction * pg_settings_max_connections)) > 0.20'
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: Postgresql too many locks acquired (instance {{ $labels.instance }})
          description: "Too many locks acquired on the database. If this alert happens frequently, we may need to increase the postgres setting max_locks_per_transaction.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      
      # 2.2.19. Postgresql bloat index high (> 80%) 
      - alert: PostgresqlBloatIndexHigh(>80%)
        expr: 'pg_bloat_btree_bloat_pct > 80 and on (idxname) (pg_bloat_btree_real_size > 100000000)'
        for: 1h
        labels:
          severity: warning
        annotations:
          summary: Postgresql bloat index high (> 80%) (instance {{ $labels.instance }})
          description: "The index {{ $labels.idxname }} is bloated. You should execute `REINDEX INDEX CONCURRENTLY {{ $labels.idxname }};`\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      
      # 2.2.20. Postgresql bloat table high (> 80%) 
      - alert: PostgresqlBloatTableHigh(>80%)
        expr: 'pg_bloat_table_bloat_pct > 80 and on (relname) (pg_bloat_table_real_size > 200000000)'
        for: 1h
        labels:
          severity: warning
        annotations:
          summary: Postgresql bloat table high (> 80%) (instance {{ $labels.instance }})
          description: "The table {{ $labels.relname }} is bloated. You should execute `VACUUM {{ $labels.relname }};`\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
