# docker-compose -f postgres.yml up -d
version: '2.4'
services:
  
  # PostgreSQL - object-relational database (SQL)
  # https://www.postgresql.org/ + https://github.com/postgres/postgres
  # https://hub.docker.com/_/postgres + https://github.com/docker-library/postgres
  # PostGIS - a spatial database extender for PostgreSQL
  # https://postgis.net/ + https://github.com/postgis/postgis/
  # https://hub.docker.com/r/postgis/postgis + https://github.com/postgis/docker-postgis
  # https://github.com/Tob1asDocker/rpi-postgresql-postgis
  # Optional: additional user without admin permission
  # * with init script (init-user-db.sh): https://github.com/docker-library/docs/tree/master/postgres#initialization-scripts
  # * with docker command when container running: docker exec -it postgres psql 
  #   CREATE ROLE user_name WITH LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT NOREPLICATION CONNECTION LIMIT -1 PASSWORD 'user_password';
  #   CREATE DATABASE database_name WITH OWNER = user_name ENCODING = 'UTF8' CONNECTION LIMIT = -1;
  #   GRANT ALL PRIVILEGES ON DATABASE "database_name" to user_name;
  postgres:
    image: postgres:15-alpine                                # Supported architectures: arm32v5, arm32v6, arm32v7, arm64v8, amd64
    #image: postgis/postgis:15-3.4-alpine                    # Supported architectures: amd64
    #image: tobi312/rpi-postgresql-postgis:15-3.3-alpine-*   # Supported architectures: arm32v7, arm64v8
    container_name: postgres
    volumes:
      - ./postgres-data:/var/lib/postgresql/data:rw
      #- ./postgres-init/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh:ro
      #- /etc/timezone:/etc/timezone:ro
      #- /etc/localtime:/etc/localtime:ro
    environment:
       TZ: Europe/Berlin
       POSTGRES_PASSWORD: passw0rd
       #POSTGRES_DB: postgres
       #POSTGRES_USER: postgres
       #PGDATA: /var/lib/postgresql/data/pgdata
    restart: unless-stopped
    ports:
      - 5432:5432/tcp
      #- 127.0.0.1:5432:5432/tcp # use this and comment out the other, if you want connect only from localhost
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 60s
      timeout: 5s
      retries: 5