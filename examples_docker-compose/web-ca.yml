# docker-compose -f web-ca.yml -p web-ca up -d
version: '2.4'
services:

  # Info:
  # Create own CA with easy-rsa <https://github.com/OpenVPN/easy-rsa>
  # Example: https://github.com/Tob1as/docker-tools#easy-rsa
  #          (and for CRL edit: "/usr/share/easy-rsa/x509-types/COMMON")

  web-ca:
    image: nginx:alpine
    container_name: web-ca
    restart: unless-stopped
    #ports:
    #- "80:80/tcp"
    volumes:
    # config
    - ./config_web-ca/nginx_default.conf:/etc/nginx/conf.d/default.conf:ro
    - ./config_web-ca/index.html:/usr/share/nginx/html/index.html:ro
    # ca/crl files
    - ./config_web-ca/pki/:/usr/share/nginx/html/pki/:ro
    environment:
      TZ: Europe/Berlin
    healthcheck:
      #test: ["CMD-SHELL", "nc -nzv -w 3 localhost 80 || exit 1"]
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:80/nginx_status || exit 1"]
      #test: ["CMD-SHELL", "curl --fail http://localhost:80/nginx_status || exit 1"]
      #start_period: 30s
      interval: 10s
      timeout: 3s
      retries: 3
    labels:
      # Explicitly tell Traefik to expose this container
      - "traefik.enable=true"
      #- "traefik.docker.network=mynetwork"
      - "traefik.http.services.web-ca.loadbalancer.server.port=80"
      - "traefik.http.services.web-ca.loadbalancer.server.scheme=http"  # when "https" then set "--serversTransport.insecureSkipVerify=true" for traefik
      # http
      - "traefik.http.routers.web-ca-http.rule=Host(`ca.example.com`,`ca.example.net`) && PathPrefix(`/`)"
      - "traefik.http.routers.web-ca-http.entrypoints=web"
      - "traefik.http.routers.web-ca-http.service=web-ca"
      # https
      - "traefik.http.routers.web-ca-https.tls=true"
      - "traefik.http.routers.web-ca-https.rule=Host(`ca.example.com`,`ca.example.net`) && PathPrefix(`/`)"
      - "traefik.http.routers.web-ca-https.entrypoints=websecure"
      - "traefik.http.routers.web-ca-https.service=web-ca"
      
      # IMPORTANT: Do NOT redirect HTTP to HTTPS! (Because ca/crl must be downloadable without an encrypted connection.)
      
networks:
  default:
    external: true
    name: mynetwork
