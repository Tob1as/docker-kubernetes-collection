# docker-compose -f traefik.yml up -d
version: '2.4'
services:

  # https://hub.docker.com/_/traefik & https://hub.docker.com/r/traefik/whoami
  # https://doc.traefik.io/traefik/
  # https://medium.com/@clintcolding/use-your-own-certificates-with-traefik-a31d785a6441
  # https://community.traefik.io/t/enable-a-secure-dashboard-using-a-pathprefix/3763/6
  # https://github.com/traefik/traefik/issues/5853
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    #network_mode: "host"
    environment:
      - TZ=Europe/Berlin
    command: 
      - "--accesslog.fields.names.StartUTC=drop" # for TZ
      - "--log.level=debug"
      #- " --log.format=json"
      #- "--accesslog=true"
      - "--ping=true"
      - "--api=true"
      - "--api.dashboard=true"
      # Traefik will listen on port 8080 by default for API request. Unsecure!
      #- "--api.insecure=true"
      # Enabling docker provider
      - "--providers.docker=true"
      #- "--providers.docker.endpoint=unix:///var/run/docker.sock"
      # Do not expose containers unless explicitly told so
      - "--providers.docker.exposedbydefault=false"
      # Defines a default docker network to use for connections to all containers.
      #- "--providers.docker.network=mynetwork"
      # Defines the client timeout (in seconds) for HTTP connections. If its value is 0, no timeout is set.
      #- "--providers.docker.httpClientTimeout=300"
      # Watch Docker events.
      #- "--providers.docker.watch=false"
      
      # Enables the web UI and tells Traefik to listen to docker
      # Traefik will listen to incoming request on the port 80 (HTTP)
      - "--entrypoints.web.address=:80"
      # HTTPS
      - "--entrypoints.websecure.address=:443"
      #- "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      #- "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      #- "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      # 
      # Teamspeak3
      #- "--entrypoints.ts-udp.address=:9987/udp"
      #- "--entrypoints.ts-tcp-sq.address=:10011"
      #- "--entrypoints.ts-tcp-ft.address=:30033"
      # MQTT (VerneMQ/Mosquitto)
      #- "--entrypoints.mqtt.address=:1883"
      #- "--entrypoints.mqtts.address=:8883"
      
      # Dynamic Config File(s)
      - "--providers.file.directory=/etc/traefik/dynamic"
      #- "--providers.file.filename=/etc/traefik/dynamic/traefik-config.yaml"
      - "--providers.file.watch=true"

      # Certificates from Letsencrypt (https://doc.traefik.io/traefik/https/acme/) OR/AND use dynamic file
      ##- "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web" # HTTP-01 OR use TLS-ALPN-01
      #- "--certificatesresolvers.myresolver.acme.tlschallenge=true"             # TLS-ALPN-01 OR use HTTP-01
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory" # Staging/Test URL: https://acme-staging-v02.api.letsencrypt.org/directory
      #- "--certificatesresolvers.myresolver.acme.email=postmaster@example.com"
      #- "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      
      # SSL backend Cert
      #- "--serversTransport.rootCAs=/etc/certs/fullCA.crt"
      - "--serversTransport.insecureSkipVerify=true"
      
      # https://plugins.traefik.io/install
      # https://plugins.traefik.io/plugins/62947307108ecc83915d7783/rewrite-body
      - "--experimental.plugins.plugin-rewritebody.modulename=github.com/traefik/plugin-rewritebody"
      - "--experimental.plugins.plugin-rewritebody.version=v0.3.1"
      # https://plugins.traefik.io/plugins/62947354108ecc83915d778e/block-path
      - "--experimental.plugins.plugin-blockpath.modulename=github.com/traefik/plugin-blockpath"
      - "--experimental.plugins.plugin-blockpath.version=v0.2.1"

      # Metrics https://doc.traefik.io/traefik/observability/metrics/prometheus/
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addrouterslabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--entryPoints.metrics.address=:8082"
      - "--metrics.prometheus.entryPoint=metrics"

    labels:
      ## Traefik Dashboard/API Secure and with Auth
      - "traefik.enable=true"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
      - "traefik.http.services.traefik.loadbalancer.server.scheme=http"

      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls=true"
      #- "traefik.http.routers.traefik.tls.certresolver=myresolver"

      ## (1) Traefik under sub domain OR choose option (2)
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.routers.traefik.rule=Host(`traefik.example.com`)"

      ## (2) Traefik under main domain and subpath (need Plugin: plugin-rewritebody)  OR choose option (1)
      ## https://community.traefik.io/t/enable-a-secure-dashboard-using-a-pathprefix/3763/6
      ## https://github.com/traefik/traefik/issues/5853
      #- "traefik.http.routers.traefik.middlewares=traefikdashboard,auth,traefik-rewrite-api"
      ##- "traefik.http.routers.traefik.rule=Host(`example.com`) && (PathPrefix(`/traefik`) || PathPrefix(`/api`))"
      #- "traefik.http.routers.traefik.rule=Host(`example.com`) && PathPrefix(`/traefik`)"
      #- "traefik.http.middlewares.traefikdashboard.stripprefix.prefixes=/traefik"
      #- "traefik.http.middlewares.traefik-rewrite-api.plugin.plugin-rewritebody.rewrites[0].regex=/api"
      #- "traefik.http.middlewares.traefik-rewrite-api.plugin.plugin-rewritebody.rewrites[0].replacement=/traefik/api"

      # auth (You may need to escape any $ with another $.) (docker run --rm tobi312/tools:htpasswd -bn admin 'passw0rd'   OR  only for Password: openssl passwd -apr1)
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$6Yq5UCPq$$ZmXnIrJwqH0qfKRurLAiR1,traefik:$$apr1$$zIohxmBm$$TVYfYKcqYXOdONsU93L8w0"

      ## set a rule to redirect all http requests to https
      #- "traefik.http.routers.http-catchall.entrypoints=web"
      #- "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      #- "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      #- "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      #- "traefik.http.middlewares.redirect-to-https.redirectscheme.port=443"
    
    ports:
      # The HTTP port
      - "80:80/tcp"
      # The HTTPS port
      - "443:443/tcp"
      # The Web UI (enabled by --api.insecure=true)
      #- "127.0.0.1:8080:8080/tcp"
      # Metrics for Prometheus (enable by --metrics.prometheus=true)
      #- "127.0.0.1:8082:8082/tcp"
      # OTHER SERVICES 
      #- "9987:9987/udp"    # TS3
      #- "10011:10011/tcp"  # TS3 serverquery
      #- "30033:30033/tcp"  # TS3 filetransfer
      #- "1883:1883/tcp"    # MQTT
      #- "8883:8883/tcp"    # MQTTS
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the dynamic configuration
      - ./config_traefik/:/etc/traefik/dynamic/
      # Mount the directory containing the certs
      #- ssl/:/etc/certs/:ro
      - ./ssl/:/etc/certs/:ro
    healthcheck:
      test: ["CMD-SHELL", "traefik healthcheck --ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # A container that exposes an API to show its IP address
  traefik-whoami:
    image: traefik/whoami:latest
    container_name: traefik-whoami
    restart: unless-stopped
    labels:
      # Explicitly tell Traefik to expose this container
      - "traefik.enable=true"
      #- "traefik.docker.network=mynetwork"  # set when more then one networks
      # Tell Traefik to use the port 80 to connect to `my-container` (=whoami)
      - "traefik.http.services.whoami.loadbalancer.server.port=80"
      - "traefik.http.services.whoami.loadbalancer.server.scheme=http"  # when "https" then set "--serversTransport.insecureSkipVerify=true" for traefik
      
      # http
      #- "traefik.http.routers.whoami.rule=HostRegexp(`{catchall:.*}`)"
      #- "traefik.http.routers.whoami-http.rule=Host(`example.net`, `example.com`) && PathPrefix(`/whoami`)"
      #- "traefik.http.routers.whoami-http.rule=Host(`whoami.example.net`, `whoami.example.com`) && PathPrefix(`/whoami`)"
      - "traefik.http.routers.whoami-http.rule=Host(`whoami.example.net`, `whoami.example.com`)"
      - "traefik.http.routers.whoami-http.rule=PATH(`/whoami`)"
      # Allow request only from the predefined entry point named "web"
      - "traefik.http.routers.whoami-http.entrypoints=web"
      - "traefik.http.routers.whoami-http.service=whoami"

      # https (both http + https (ssl), then create two routers, see https://stackoverflow.com/a/69314734 )
      - "traefik.http.routers.whoami-https.tls=true"
      #- "traefik.http.routers.whoami-https.rule=Host(`example.net`, `example.com`) && PathPrefix(`/whoami`)"
      #- "traefik.http.routers.whoami-https.rule=Host(`whoami.example.net`, `whoami.example.com`) && PathPrefix(`/whoami`)"
      - "traefik.http.routers.whoami-https.rule=Host(`whoami.example.net`, `whoami.example.com`)"
      - "traefik.http.routers.whoami-https.rule=PATH(`/whoami`)"
      - "traefik.http.routers.whoami-https.entrypoints=websecure"
      - "traefik.http.routers.whoami-https.service=whoami"
      #- "traefik.http.routers.whoami.tls.certresolver=myresolver"
      ##- traefik.http.routers.blog.tls.domains[0].main=whoami.example.net
      ##- traefik.http.routers.blog.tls.domains[0].sans=whoami.example.com
      
      # load middlewares for routers
      #- "traefik.http.routers.whoami-http.middlewares=whoami-https"

      # http to https redirect
      #- "traefik.http.middlewares.whoami-https.redirectscheme.scheme=https"
      #- "traefik.http.middlewares.whoami-https.redirectscheme.permanent=false"
      #- "traefik.http.middlewares.whoami-https.redirectscheme.port=443"
      
networks:
  default:
    external: true
    name: mynetwork

## before start container copy ssl certs/key and cacert.jks in ./ssl
#volumes:
#  ssl:
#    driver_opts:
#      type: none
#      #device: ${PWD}/ssl
#      device: /data/ssl
#      o: bind

## create file "./config_traefik/traefik-config.yaml" with content:
#tls:
#  stores:
#    default:
#      defaultCertificate:
#        certFile: /etc/certs/example-com.crt
#        keyFile: /etc/certs/example-com.key
#  certificates:
#    # first certificate
#    - certFile: /etc/certs/example-com.crt
#      keyFile: /etc/certs/example-com.key
#    # second certificate
#    - certFile: /etc/certs/example-net.crt
#      keyFile: /etc/certs/example-net.key
