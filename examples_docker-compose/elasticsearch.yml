# docker-compose -f elasticsearch.yml up -d
version: '2.4'
services:
  
  # Elasticsearch - RESTful search and analytics engine
  # https://www.elastic.co/elasticsearch/
  # https://github.com/elastic/elasticsearch
  # https://hub.docker.com/_/elasticsearch + https://hub.docker.com/r/elastic/elasticsearch
  # https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html
  # https://discuss.elastic.co/t/set-password-and-user-with-docker-compose/225075/2
  # or use a community open source fork: https://github.com/opensearch-project/OpenSearch
  #                                      https://opensearch.org/docs/latest/opensearch/install/docker/
  # Supported architectures: arm64v8, amd64
  # fix permission problem before startup: "mkdir ./data_elasticsearch/ && chmod 777 ./data_elasticsearch/"
  elasticsearch:
    image: elastic/elasticsearch:8.10.2
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx2g"
      - http.port=9200
      - transport.port=9300
      - http.cors.enabled=true
      - http.cors.allow-origin=/.*/
      - http.cors.allow-headers=X-Requested-With,Content-Type,Content-Length,Authorization
      #- http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
      - ELASTIC_PASSWORD=passw0rd  # Password for default user "elastic"
      - xpack.security.enabled=true
      #- xpack.security.http.ssl.enabled=true
      #- xpack.security.http.ssl.verification_mode=full
      #- xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certificates/ca-certificates.crt
      #- xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certificates/ssl.crt
      #- xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certificates/ssl.key
      ##- xpack.security.http.ssl.cipher_suites=
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 2g
    cpus: 2
    volumes:
      - ./data_elasticsearch:/usr/share/elasticsearch/data:rw
    ports:
      - 127.0.0.1:9200:9200/tcp  # API calls over HTTP
      #- 9300:9300/tcp           # communications between nodes in a cluster
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail -XGET 'http://127.0.0.1:9200/_cluster/health?pretty' --user elastic:$$ELASTIC_PASSWORD || exit 1"]
      #test: ["CMD-SHELL", "curl --silent --insecure --fail -XGET 'https://127.0.0.1:9200/_cluster/health?pretty' --user elastic:$$ELASTIC_PASSWORD || exit 1"]
      #start_period: 30s
      interval: 60s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      #- "traefik.docker.network=mynetwork"
      - "traefik.http.services.elasticsearch.loadbalancer.server.port=9200"
      - "traefik.http.services.elasticsearch.loadbalancer.server.scheme=http"  # when "https" then set "--serversTransport.insecureSkipVerify=true" for traefik
      # http
      - "traefik.http.routers.elasticsearch-http.rule=Host(`elasticsearch.example.com`)"
      - "traefik.http.routers.elasticsearch-http.entrypoints=web"
      - "traefik.http.routers.elasticsearch-http.service=elasticsearch"
      # https
      - "traefik.http.routers.elasticsearch-https.tls=true"
      - "traefik.http.routers.elasticsearch-https.rule=Host(`elasticsearch.example.com`)"
      - "traefik.http.routers.elasticsearch-https.entrypoints=websecure"
      - "traefik.http.routers.elasticsearch-https.service=elasticsearch"
      # load middlewares for routes
      #- "traefik.http.routers.elasticsearch-http.middlewares=elasticsearch-https"
      # http to https redirect      
      #- "traefik.http.middlewares.elasticsearch-https.redirectscheme.scheme=https"
      #- "traefik.http.middlewares.elasticsearch-https.redirectscheme.permanent=true"
      #- "traefik.http.middlewares.elasticsearch-https.redirectscheme.port=443"
 
  # https://github.com/prometheus-community/elasticsearch_exporter
  # Supported architectures: arm32v7, arm64v8, amd64, ...
  elasticsearch-exporter:
    image: prometheuscommunity/elasticsearch-exporter:latest # quay.io/prometheuscommunity/elasticsearch-exporter:latest
    container_name: elasticsearch-exporter
    restart: unless-stopped
    #volumes:
    #  - ./ssl:/ssl:ro
    #ports:
    #  - "127.0.0.1:9114:9114/tcp"
    command:
      - '--es.uri=http://elastic:passw0rd@elasticsearch:9200'
      #- '--es.uri=https://elastic:passw0rd@elasticsearch:9200'
      #- '--es.ssl-skip-verify=false'
      #- '--es.ca=/ssl/ca.crt'
      #- "--web.listen-address=:9114"
      #- "--web.telemetry-path=/metrics"
    healthcheck:
      test: ["CMD-SHELL", "nc -nzv -w 3 127.0.0.1 9114 || exit 1"]
      #start_period: 30s
      interval: 60s
      timeout: 5s
      retries: 3
    depends_on:
      - elasticsearch

  # elasticvue - Elasticsearch gui for the browser 
  # https://elasticvue.com/
  # https://hub.docker.com/r/cars10/elasticvue + https://github.com/cars10/elasticvue
  # Supported architectures: arm32v7, arm64v8, amd64
  elasticsearch-ui:
    image: cars10/elasticvue:latest
    container_name: elasticsearch-ui
    restart: unless-stopped
    #ports:
    #  - 8080:8080/tcp
    healthcheck:
      test: ["CMD-SHELL", "nc -nzv -w 3 127.0.0.1 8080 || exit 1"]
      #start_period: 30s
      interval: 60s
      timeout: 5s
      retries: 3
    #depends_on:
    #  - elasticsearch
    labels:
      - "traefik.enable=true"
      #- "traefik.docker.network=mynetwork"
      - "traefik.http.services.elasticsearch-ui.loadbalancer.server.port=8080"
      - "traefik.http.services.elasticsearch.loadbalancer.server.scheme=http"  # when "https" then set "--serversTransport.insecureSkipVerify=true" for traefik
      # http
      - "traefik.http.routers.elasticsearch-ui-http.rule=Host(`elasticsearch-ui.example.com`)"
      - "traefik.http.routers.elasticsearch-ui-http.entrypoints=web"
      - "traefik.http.routers.elasticsearch-ui-http.service=elasticsearch-ui"
      # https
      - "traefik.http.routers.elasticsearch-ui-https.tls=true"
      - "traefik.http.routers.elasticsearch-ui-https.rule=Host(`elasticsearch-ui.example.com`)"
      - "traefik.http.routers.elasticsearch-ui-https.entrypoints=websecure"
      - "traefik.http.routers.elasticsearch-ui-https.service=elasticsearch-ui"
      # load middlewares for routes
      - "traefik.http.routers.elasticsearch-ui-http.middlewares=elasticsearch-ui-https"
      # http to https redirect      
      - "traefik.http.middlewares.elasticsearch-ui-https.redirectscheme.scheme=https"
      #- "traefik.http.middlewares.elasticsearch-ui-https.redirectscheme.permanent=true"
      #- "traefik.http.middlewares.elasticsearch-ui-https.redirectscheme.port=443"

#  # https://github.com/stephanediondev/elasticsearch-admin
#  elasticsearch-admin:
#    image: stephanediondev/elasticsearch-admin:latest
#    container_name: elasticsearch-admin
#    restart: unless-stopped
#    environment:
#      - SECRET_REGISTER=passw0rd    # for the creation of the first user account, accounts are stored in elasticsearch.
#      - ELASTICSEARCH_URL=https://elasticsearch.example.com
#      - ELASTICSEARCH_USERNAME=elastic
#      - ELASTICSEARCH_PASSWORD=passw0rd
#      #- ELASTICSEARCH_API_KEY=
#      #- SSL_VERIFY_PEER=true
#      #- SSL_VERIFY_HOST=true
#    #volumes:
#    #  - ./ssl/ssl.crt:/etc/nginx/fullchain.pem:ro
#    #  - ./ssl/ssl.key:/etc/nginx/privkey.pem:ro
#    #ports:
#    #  - 8080:8080/tcp
#    #  - 4443:4443/tcp
#    #healthcheck:
#    #  test: ["CMD-SHELL", "curl --silent --fail http://127.0.0.1:8080/fpm-ping"]
#    #  #test: ["CMD-SHELL", "nc -nzv -w 3 127.0.0.1 8080 || exit 1"]
#    #  #start_period: 30s
#    #  interval: 60s
#    #  timeout: 5s
#    #  retries: 3
#    depends_on:
#      - elasticsearch
#    labels:
#      - "traefik.enable=true"
#      #- "traefik.docker.network=mynetwork"
#      - "traefik.http.services.elasticsearch-admin.loadbalancer.server.port=8080"
#      - "traefik.http.services.elasticsearch.loadbalancer.server.scheme=http"  # when "https" then set "--serversTransport.insecureSkipVerify=true" for traefik
#      # http
#      - "traefik.http.routers.elasticsearch-admin-http.rule=Host(`elasticsearch-admin.example.com`)"
#      - "traefik.http.routers.elasticsearch-admin-http.entrypoints=web"
#      - "traefik.http.routers.elasticsearch-admin-http.service=elasticsearch-admin"
#      # https
#      - "traefik.http.routers.elasticsearch-admin-https.tls=true"
#      - "traefik.http.routers.elasticsearch-admin-https.rule=Host(`elasticsearch-admin.example.com`)"
#      - "traefik.http.routers.elasticsearch-admin-https.entrypoints=websecure"
#      - "traefik.http.routers.elasticsearch-admin-https.service=elasticsearch-admin"
#      # load middlewares for routes
#      - "traefik.http.routers.elasticsearch-admin-http.middlewares=elasticsearch-admin-https"
#      # http to https redirect      
#      - "traefik.http.middlewares.elasticsearch-admin-https.redirectscheme.scheme=https"
#      #- "traefik.http.middlewares.elasticsearch-admin-https.redirectscheme.permanent=true"
#      #- "traefik.http.middlewares.elasticsearch-admin-https.redirectscheme.port=443"

#  # https://github.com/appbaseio/dejavu
#  elasticsearch-dejavu:
#    image: appbaseio/dejavu:latest
#    container_name: elasticsearch-dejavu
#    restart: unless-stopped
#    #ports:
#    #  - 1358:1358/tcp
#    healthcheck:
#      test: ["CMD-SHELL", "nc -nzv -w 3 127.0.0.1 1358 || exit 1"]
#      #start_period: 30s
#      interval: 60s
#      timeout: 5s
#      retries: 3
#    #depends_on:
#    #  - elasticsearch
#    labels:
#      - "traefik.enable=true"
#      #- "traefik.docker.network=mynetwork"
#      - "traefik.http.services.elasticsearch-dejavu.loadbalancer.server.port=1358"
#      #- "traefik.http.services.elasticsearch.loadbalancer.server.scheme=http"
#      # http
#      - "traefik.http.routers.elasticsearch-dejavu-http.rule=Host(`elasticsearch-dejavu.example.com`)"
#      - "traefik.http.routers.elasticsearch-dejavu-http.entrypoints=web"
#      - "traefik.http.routers.elasticsearch-dejavu-http.service=elasticsearch-dejavu"
#      # https
#      - "traefik.http.routers.elasticsearch-dejavu-https.tls=true"
#      - "traefik.http.routers.elasticsearch-dejavu-https.rule=Host(`elasticsearch-dejavu.example.com`)"
#      - "traefik.http.routers.elasticsearch-dejavu-https.entrypoints=websecure"
#      - "traefik.http.routers.elasticsearch-dejavu-https.service=elasticsearch-dejavu"
#      # load middlewares for routes
#      - "traefik.http.routers.elasticsearch-dejavu-http.middlewares=elasticsearch-dejavu-https"
#      # http to https redirect      
#      - "traefik.http.middlewares.elasticsearch-dejavu-https.redirectscheme.scheme=https"
#      #- "traefik.http.middlewares.elasticsearch-dejavu-https.redirectscheme.permanent=true"
#      #- "traefik.http.middlewares.elasticsearch-dejavu-https.redirectscheme.port=443"

networks:
  default:
    external: true
    name: mynetwork
