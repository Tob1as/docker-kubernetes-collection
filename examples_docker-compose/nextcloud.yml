# docker-compose -f nextcloud.yml -p nextcloud up -d
version: '2.4'
services:

  # IMPORTANT: 
  # This image (nextcloud:<tag> from Docker Hub) is not officially supported by Nextcloud GmbH, use at your own risk. 
  # Use the All-in-One docker image for easier deployment. https://nextcloud.com/de/blog/how-to-install-the-nextcloud-all-in-one-on-linux/

  # Nextcloud - Filesharing
  # https://nextcloud.com/
  # https://github.com/nextcloud/docker
  # https://hub.docker.com/_/nextcloud
  # Supported architectures: arm32v5, arm32v7, arm64v8, amd64, ...
  nextcloud:
    image: nextcloud:latest
    container_name: nextcloud
    restart: unless-stopped
    #ports:
    #  - 8080:80
    environment:
      TZ: Europe/Berlin
      NEXTCLOUD_ADMIN_USER: admin
      NEXTCLOUD_ADMIN_PASSWORD: passw0rd
      #NEXTCLOUD_DATA_DIR: /var/www/html/data
      NEXTCLOUD_TRUSTED_DOMAINS: nextcloud.example.com
      #NEXTCLOUD_UPDATE: 1
      #NEXTCLOUD_INIT_HTACCESS: 1
      # Databases (SQLite, MariaDB or PostgreSQL)
      # SQLite
      #SQLITE_DATABASE: sqlite3.db # not recommended
      # MariaDB / MySQL
      MYSQL_HOST: nextcloud-db:3306
      MYSQL_USER: nextcloud
      MYSQL_PASSWORD: password
      MYSQL_DATABASE: nextcloud
      # PostgreSQL
      #POSTGRES_HOST: nextcloud-postgres:5432
      #POSTGRES_USER: nextcloud
      #POSTGRES_PASSWORD: nextcloud
      #POSTGRES_DB: nextcloud
      # Redis
      REDIS_HOST: nextcloud-redis
      REDIS_HOST_PORT: 6379
      #REDIS_HOST_PASSWORD: passw0rd
      # Mail (SMTP)
      SMTP_HOST: mail.example.com
      SMTP_SECURE: tls
      SMTP_PORT: 587
      SMTP_AUTHTYPE: Login
      SMTP_NAME: no-reply@example.com
      SMTP_PASSWORD: passw0rd
      MAIL_FROM_ADDRESS: no-reply
      MAIL_DOMAIN: example.com
      # PHP/Apache
      #PHP_MEMORY_LIMIT: 512MB
      #PHP_UPLOAD_LIMIT: 512MB
      #APACHE_BODY_LIMIT: 1073741824 # 1GiB
      #APACHE_DISABLE_REWRITE_IP: 0
      TRUSTED_PROXIES: 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16 fc00::/7 fe80::/10
      OVERWRITEHOST: nextcloud.example.com
      OVERWRITEPROTOCOL: https
      #OVERWRITECLIURL: https://nextcloud.example.com
      #OVERWRITEWEBROOT: /
      #OVERWRITECONDADDR:
    volumes:
      - ./data_nextcloud/nextcloud:/var/www/html:rw
      #- /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
    depends_on:
      nextcloud-db:
        condition: service_healthy
      nextcloud-redis:
        condition: service_healthy
    healthcheck:  
      test:  curl --fail --insecure http://localhost:80/robots.txt || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      #start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      - "traefik.http.services.nextcloud.loadbalancer.server.port=80"
      - "traefik.http.services.nextcloud.loadbalancer.server.scheme=http"  # when "https" then set "--serversTransport.insecureSkipVerify=true" for traefik
      # http
      - "traefik.http.routers.nextcloud-http.rule=Host(`nextcloud.example.com`)"
      - "traefik.http.routers.nextcloud-http.entrypoints=web"
      - "traefik.http.routers.nextcloud-http.service=nextcloud"
      # https
      - "traefik.http.routers.nextcloud-https.tls=true"
      - "traefik.http.routers.nextcloud-https.rule=Host(`nextcloud.example.com`)"
      - "traefik.http.routers.nextcloud-https.entrypoints=websecure"
      - "traefik.http.routers.nextcloud-https.service=nextcloud"
      # load middlewares for routers
      - "traefik.http.routers.nextcloud-http.middlewares=nextcloud_redirectregex@docker,nextcloud-https@docker"
      - "traefik.http.routers.nextcloud-https.middlewares=nextcloud_redirectregex@docker"
      # http to https redirect
      - "traefik.http.middlewares.nextcloud-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.nextcloud-https.redirectscheme.permanent=true"
      #- "traefik.http.middlewares.nextcloud-https.redirectscheme.port=443"
      # https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/reverse_proxy_configuration.html#traefik-2
      - "traefik.http.middlewares.nextcloud_redirectregex.redirectregex.permanent=true"
      - "traefik.http.middlewares.nextcloud_redirectregex.redirectregex.regex=https://(.*)/.well-known/(?:card|cal)dav"
      - "traefik.http.middlewares.nextcloud_redirectregex.redirectregex.replacement=https://$${1}/remote.php/dav"
    networks:
      - nextcloud-net
      - traefik
      
  nextcloud-cron:
    image: nextcloud:latest
    container_name: nextcloud-cron
    restart: unless-stopped
    volumes_from:
      - nextcloud
    entrypoint: /cron.sh
    depends_on:
      nextcloud-db:
        condition: service_healthy
      nextcloud-redis:
        condition: service_healthy
    networks:
      - nextcloud-net
      
  nextcloud-db:
    image: mariadb:10.11                      # Supported architectures: amd64, arm64v8
    #image: tobi312/rpi-mariadb:10.11-alpine  # Supported architectures: arm32v7 (RaspberryPi)
    container_name: nextcloud-db
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
      - MYSQL_ROOT_PASSWORD=passw0rd
      - MYSQL_USER=nextcloud
      - MYSQL_PASSWORD=passw0rd
      - MYSQL_DATABASE=nextcloud
      #- MARIADB_AUTO_UPGRADE=1
      #- MARIADB_DISABLE_UPGRADE_BACKUP=1
    command: ["--transaction-isolation=READ-COMMITTED", "--log-bin=binlog", "--binlog-format=ROW"]
    healthcheck:
      #test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u", "$$MYSQL_USER", "--password=$$MYSQL_PASSWORD"]
      test:  mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - ./data_nextcloud/db:/var/lib/mysql:rw
    networks:
      - nextcloud-net

  nextcloud-redis:
    image: redis:alpine                            # Supported architectures: arm32v7, arm64v8, amd64, ...
    container_name: nextcloud-redis
    restart: unless-stopped
    #environment:
    #  REDIS_PASSWORD: passw0rd
    #command: ["sh", "-c", "exec redis-server --databases 1 --requirepass $${REDIS_PASSWORD}"]
    command: ["sh", "-c", "exec redis-server --databases 1"]
    healthcheck:
      #test: ["CMD","sh","-c","exec redis-cli --no-auth-warning -a $${REDIS_PASSWORD} ping"]
      test: ["CMD","sh","-c","exec redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - ./data_nextcloud/redis:/data:rw
    networks:
      - nextcloud-net

networks:
  nextcloud-net:
  traefik:
    external: true
    name: mynetwork
