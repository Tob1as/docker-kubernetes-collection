# https://rabbitmq.com/management.html

#management.path_prefix = /ui

management.tcp.port = 15672
#management.tcp.ip = 0.0.0.0

management.ssl.port       = 15671
management.ssl.cacertfile = /ssl/ca.crt
management.ssl.certfile   = /ssl/ssl.crt
management.ssl.keyfile    = /ssl/ssl.key
## This key must only be used if private key is password protected
# management.ssl.password   = changeme

management.ssl.honor_cipher_order   = true
management.ssl.honor_ecc_order      = true
management.ssl.client_renegotiation = false
management.ssl.secure_renegotiate   = true

management.ssl.versions.1 = tlsv1.3
management.ssl.versions.2 = tlsv1.2

#management.ssl.ciphers.1 = ECDHE-ECDSA-AES256-GCM-SHA384
#management.ssl.ciphers.2 = ECDHE-RSA-AES256-GCM-SHA384
#management.ssl.ciphers.3 = ECDHE-ECDSA-AES256-SHA384
#management.ssl.ciphers.4 = ECDHE-RSA-AES256-SHA384
#management.ssl.ciphers.5 = ECDH-ECDSA-AES256-GCM-SHA384
#management.ssl.ciphers.6 = ECDH-RSA-AES256-GCM-SHA384
#management.ssl.ciphers.7 = ECDH-ECDSA-AES256-SHA384
#management.ssl.ciphers.8 = ECDH-RSA-AES256-SHA384
#management.ssl.ciphers.9 = DHE-RSA-AES256-GCM-SHA384

## Usually RabbitMQ nodes do not perform peer verification of HTTP API clients
## but it can be enabled if needed. Clients then will have to be configured with
## a certificate and private key pair.
##
## See https://www.rabbitmq.com/ssl.html#peer-verification for details.
# management.ssl.verify = verify_peer
# management.ssl.fail_if_no_peer_cert = false


#management.tcp.compress = true
## Configures HTTP (non-encrypted) listener timeouts
#management.tcp.idle_timeout       = 120000
#management.tcp.inactivity_timeout = 120000
#management.tcp.request_timeout    = 10000
## Configures HTTPS (TLS-enabled) listener timeouts
#management.ssl.idle_timeout       = 120000
#management.ssl.inactivity_timeout = 120000
#management.ssl.request_timeout    = 10000
