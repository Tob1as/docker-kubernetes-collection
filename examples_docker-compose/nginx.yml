# docker-compose -f nginx.yml up -d
version: '2.4'
services:
  
  # NGINX - web server, proxy server, load balancer and more
  # https://nginx.org/
  # https://github.com/nginx/nginx
  # https://hub.docker.com/_/nginx + https://github.com/nginxinc/docker-nginx
  # Supported architectures: arm32v6, arm32v7, arm64v8, amd64, ...
  # URL: http://localhost/ + https://localhost/
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    #ports:
    #  - "80:80/tcp"
    #  - "443:443/tcp"
    volumes:
      #- ./config_nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      #- ./config_nginx/conf.d/:/etc/nginx/conf.d/:rw
      #- ./ssl:/etc/nginx/ssl:ro
      #- ./ssl/letsencrypt-webroot:/var/tmp/letsencrypt-webroot:rw
      - ./html:/usr/share/nginx/html:rw
    environment:
      TZ: Europe/Berlin
    #  DOMAIN_NAME: 'example.com www.example.com'
    #command: /bin/sh -c "envsubst '$$DOMAIN_NAME' < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    healthcheck:
      # need installed "netcat":
      test: ["CMD-SHELL", "nc -nzv -w 3 localhost 80 || exit 1"]
      #test: ["CMD-SHELL", "nc -nzv -w 3 localhost 443 || exit 1"]
      # need installed "wget" and enabled stub_status:
      #test:  wget --quiet --tries=1 --spider http://localhost:80/nginx_status || exit 1
      #test:  wget --quiet --tries=1 --spider --no-check-certificate  https://localhost:443/nginx_status || exit 1
      # need installed "curl" and enabled stub_status:
      #test:  curl --fail http://localhost:80/nginx_status || exit 1  
      #test:  curl --fail --insecure https://localhost:443/nginx_status || exit 1
      interval: 60s
      timeout: 3s
      retries: 3
      #start_period: 30s
    labels:
      # Explicitly tell Traefik to expose this container
      - "traefik.enable=true"
      #- "traefik.docker.network=mynetwork"
      # Tell Traefik to use the http port 80 to connect to nginx container
      - "traefik.http.services.nginx.loadbalancer.server.port=80"
      - "traefik.http.services.nginx.loadbalancer.server.scheme=http"  # when "https" then set "--serversTransport.insecureSkipVerify=true" for traefik
      # http
      - "traefik.http.routers.nginx-http.rule=Host(`example.com`, `www.example.com`)"
      - "traefik.http.routers.nginx-http.entrypoints=web"
      - "traefik.http.routers.nginx-http.service=nginx"
      # https
      - "traefik.http.routers.nginx-https.tls=true"
      - "traefik.http.routers.nginx-https.rule=Host(`example.com`, `www.example.com`)"
      - "traefik.http.routers.nginx-https.entrypoints=websecure"
      - "traefik.http.routers.nginx-https.service=nginx"
      # load middlewares for routes
      #- "traefik.http.routers.nginx-http.middlewares=nginx-https"
      # http to https redirect      
      #- "traefik.http.middlewares.nginx-https.redirectscheme.scheme=https"
      #- "traefik.http.middlewares.nginx-https.redirectscheme.permanent=true"
      #- "traefik.http.middlewares.nginx-https.redirectscheme.port=443"

#  # https://github.com/nginxinc/nginx-prometheus-exporter
#  nginx-exporter:
#    image: nginx/nginx-prometheus-exporter:latest
#    container_name: nginx-exporter
#    restart: unless-stopped
#    #ports:
#    #  - "127.0.0.1:9113:9113/tcp"
#    command:
#      - '-nginx.scrape-uri=http://nginx:80/nginx_status'  # need stub_status page
#      #- '-nginx.ssl-verify=false'
#      #- '-web.listen-address=:9113'
#      #- '-web.telemetry-path=/metrics'
#    depends_on:
#      - nginx

networks:
  default:
    external: true
    name: mynetwork
