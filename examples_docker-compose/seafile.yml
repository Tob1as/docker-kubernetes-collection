# docker-compose -f seafile.yml up -d

# fork of https://manual.seafile.com/latest/docker/deploy_seafile_with_docker/ ...
# ... and change mount folder, some image updates and add healtcheck!

version: '2.4'
services:

  # https://hub.docker.com/_/mariadb
  db:
    image: mariadb:10.11
    container_name: seafile-mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=passw0rd    # Requested, set the root's password of MySQL service.
      - MYSQL_LOG_CONSOLE=true
      #- MARIADB_AUTO_UPGRADE=true
    volumes:
      - ./data_seafile-db:/var/lib/mysql:rw  # Requested, specifies the path to MySQL data persistent store.
    networks:
      - seafile-net
    healthcheck:
      test:  mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD || exit 1
      interval: 60s
      timeout: 5s
      retries: 3
      #start_period: 30s

  # https://hub.docker.com/_/memcached
  memcached:
    image: memcached:1.6-alpine # old: 1.6.18
    container_name: seafile-memcached
    restart: unless-stopped
    entrypoint: memcached -m 256
    networks:
      - seafile-net
    healthcheck:
      test: ["CMD","sh","-c","exec memcached --version"]
      #start_period: 30s
      interval: 60s
      timeout: 5s
      retries: 3

  # Seafile - file sync and share solution
  # https://www.seafile.com/ & https://github.com/haiwen/seafile
  # https://manual.seafile.com/docker/deploy_seafile_with_docker/
  # https://hub.docker.com/r/seafileltd/seafile-mc
  # https://manual.seafile.com/config/seahub_settings_py/
  # https://github.com/haiwen/seafile/issues/2118#issuecomment-523688712 (CSRF_TRUSTED_ORIGINS = ['seafile.example.com:23456'])
  # https://forum.seafile.com/t/check-status-of-seafile-server/3720/6
  # Supported architectures: amd64, arm64
  seafile:
    image: seafileltd/seafile-mc:11.0-latest
    container_name: seafile
    restart: unless-stopped
    #ports:
    #  - "80:80/tcp"
    #  - "443:443/tcp"  # If https is enabled, cancel the comment.
    volumes:
      - ./data_seafile:/shared   # Requested, specifies the path to Seafile data persistent store.
    environment:
      - DB_HOST=db
      - DB_ROOT_PASSWD=passw0rd                     # Requested, the value shuold be root's password of MySQL service.
      #- TIME_ZONE=Europe/Berlin                     # Optional, default is Etc/UTC. Should be uncomment and set to your local time zone.
      - SEAFILE_ADMIN_EMAIL=me@example.com          # Specifies Seafile admin user, default is 'me@example.com'.
      - SEAFILE_ADMIN_PASSWORD=passw0rd             # Specifies Seafile admin password, default is 'asecret'.
      - SEAFILE_SERVER_LETSENCRYPT=false            # Whether to use https or not.
      - SEAFILE_SERVER_HOSTNAME=seafile.example.com # Specifies your host name if https is enabled.
    depends_on:
      - db
      - memcached
    networks:
      - seafile-net
      - mynetwork     # remove when not needed traefik
    healthcheck:
      test:  ["CMD-SHELL", "[ \"$$(curl -Ss 'http://127.0.0.1:80/api2/ping/')\" = '\"pong\"' ] || exit 1"]
      #test:  ["CMD-SHELL", "[ \"$$(curl -Ssk 'https://127.0.0.1:443/api2/ping/')\" = '\"pong\"' ] || exit 1"]
      interval: 60s
      timeout: 5s
      retries: 3
      #start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=mynetwork"  # set when more then one networks
      - "traefik.http.services.seafile.loadbalancer.server.port=80"
      - "traefik.http.services.seafile.loadbalancer.server.scheme=http"
      # http
      - "traefik.http.routers.seafile-http.rule=Host(`seafile.example.com`)"
      - "traefik.http.routers.seafile-http.entrypoints=web"
      - "traefik.http.routers.seafile-http.service=seafile"
      # https
      - "traefik.http.routers.seafile-https.tls=true"
      - "traefik.http.routers.seafile-https.rule=Host(`seafile.example.com`)"
      - "traefik.http.routers.seafile-https.entrypoints=websecure"
      - "traefik.http.routers.seafile-https.service=seafile"
      # load middlewares for routers
      - "traefik.http.routers.seafile-http.middlewares=seafile-https"
      # http to https redirect
      - "traefik.http.middlewares.seafile-https.redirectscheme.scheme=https"
      #- "traefik.http.middlewares.seafile-https.redirectscheme.permanent=true"
      #- "traefik.http.middlewares.seafile-https.redirectscheme.port=443"

networks:
  seafile-net:
  mynetwork:
    external: true
    name: mynetwork
