# use docker embedded DNS server to resolve myapp host name
#resolver 127.0.0.11;

# enable ONLY behind PROXY (Traefik, other NGINX, Caddy, lighttpd, K8s Ingress, ...) (ngx_http_realip_module)
set_real_ip_from 172.20.0.0/8;
set_real_ip_from fd00::/8;
real_ip_header X-Forwarded-For;
#real_ip_recursive on;

#upstream apache2 {
#    server apache:80;
#}

server {
    listen 80;
    listen [::]:80;
    server_name _;
    
    # disable any limits to avoid HTTP 413 for large image uploads
    client_max_body_size 0;
    
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow ::1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }

    #location  @error_page {
    #    return 200 'System is in maintenance mode!)';
    #    add_header Content-Type text/plain;
    #}

    # auth example:
    #location /secret {
    #    
    #    satisfy any;
    #    allow 192.167.1.100/32;
    #    allow 10.0.0.100/32;
    #    deny  all;
    #    auth_basic "Please Login";
    #    auth_basic_user_file /etc/nginx/.htpasswd;
    #    #proxy_set_header Host $host;
    #    #proxy_set_header X-Real-IP $remote_addr;
    #    #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #    #proxy_set_header X-Forwarded-Proto $scheme;
    #    #proxy_buffering  off;
    #    #proxy_cache      off;
    #    #proxy_pass http://secret-server:8080/;
    #    ##proxy_intercept_errors  on;
    #    ##error_page 502 503 504 = @error_page;
    #    
    #    root /usr/share/nginx/html/secret
    #}
    
    #############################################################################
    # Activate one of the following configuration blocks for server port 80 !
    # Activate the same blocks under server 443 too. Exception redirect block.
    #############################################################################
    
    # use only html
    
    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        #autoindex on;  # list files in directory
    }

	#location /test {
	#	 return 200 'NGINX Works :-)';
    #    add_header Content-Type text/plain;
    #}
    
    #############################################################################
    
    # use this for php-fpm without apache2
    
    #root /usr/share/nginx/html;
    #
    #location / {
    #    #root /usr/share/nginx/html;
    #    index index.html index.htm index.php;
    #}
    #
    #location ~ \.php$ {
    #    #root /usr/share/nginx/html;
    #    fastcgi_pass phpfpm:9000;
    #    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    #    fastcgi_index index.php;
    #    fastcgi_param REMOTE_ADDR $http_x_real_ip;
    #    fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name;
    #    include fastcgi_params;
    #    if (!-f $document_root$fastcgi_script_name) {
    #    	return 404;
    #    }
    #}
    
    #############################################################################
    
    # use this for apache2 (with php)
    
    #location / {
    #    proxy_set_header Host $http_host;
    #    proxy_set_header X-Real-IP $remote_addr;
    #    proxy_set_header X-Forwarded-Proto https;
    #    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #    proxy_set_header X-Forwarded-Ssl on;
    #    #proxy_redirect http:// https://;
    #    proxy_redirect off;
    #    add_header Pragma "no-cache";
    #    proxy_pass http://apache:80;
    #
    #	 #proxy_intercept_errors  on;
    #    #error_page 502 503 504 = @error_page;
    #}
    
    #############################################################################
    
    # use this for redirect to https (443)

    #location ^~ /.well-known/acme-challenge/ {
    #  default_type "text/plain";
    #  root /var/tmp/letsencrypt-webroot;
    #}
    
    #location / {
    #    return 301 https://$server_name$request_uri;
    #}
    
    #############################################################################
    
}

#server {
#    listen 443 default ssl http2;
#    listen [::]:443 default ssl http2;
#    server_name _;
#    
#    # SSL
#    # generate self-signed certificate for testing: 'openssl req -x509 -newkey rsa:4086 -subj "/C=DE/ST=RLP/L=Mainz/O=Tutorial\ Group/CN=Linux-Community" -keyout "./ssl/ssl.key" -out "./ssl/ssl.crt" -days 3650 -nodes -sha256'
#    # OR ...
#    # generate Let's Encrypt certificate with acme.sh:
#	 # 'curl https://get.acme.sh | sh'
#	 # 'acme.sh --set-default-ca --server letsencrypt'
#	 # 'acme.sh --install-cert -d example.com -d www.example.com --issue --debug -w ./ssl/letsencrypt-webroot --cert-file ./ssl/ssl_withoutCA.crt --key-file ./ssl/ssl.key --fullchain-file ./ssl/ssl.crt --reloadcmd "/usr/bin/docker restart nginx"'
#    # '~/.acme.sh/acme.sh --renew --force --debug -d example.com -d www.example.com -w ./ssl/letsencrypt-webroot --reloadcmd "/usr/bin/docker restart nginx"'
#    ssl_certificate /etc/ssl/ssl.crt;     # fullchain (cert with CA)
#    ssl_certificate_key /etc/ssl/ssl.key;
#    # https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html 
#    ssl_prefer_server_ciphers on;
#    ssl_session_cache shared:SSL:10m;
#    ssl_session_timeout 10m;
#    ssl_protocols TLSv1.2 TLSv1.3;
#    ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384";
#    # openssl dhparam -out dhparam.pem 4096
#    #ssl_dhparam /etc/nginx/ssl/dhparam.pem; 
#    
#    #error_page 497 https://$host:$server_port$request_uri;
#    
#    # disable any limits to avoid HTTP 413 for large image uploads
#    client_max_body_size 0;
#    
#    location /nginx_status {
#        stub_status on;
#        access_log off;
#        allow 127.0.0.1;
#        allow ::1;
#        allow 10.0.0.0/8;
#        allow 172.16.0.0/12;
#        allow 192.168.0.0/16;
#        deny all;
#    }
#
#    #location  @error_page {
#    #    return 200 'System is in maintenance mode!)';
#    #    add_header Content-Type text/plain;
#    #}
#    
#    # redirect to http for ssl cert generation
#    #location ~ /\.well-known/ {
#    #    return 301 http://$server_name$request_uri;
#    #}
#    
#    #############################################################################
#    # Activate one of the following configuration blocks for server port 443 !
#    #############################################################################
#    
#    # use only html
#    
#    location / {
#        root /usr/share/nginx/html;
#        index index.html index.htm;
#        #autoindex on;  # list files in directory
#    }
#    
#    #############################################################################
#    
#    # use this for php-fpm without apache2
#    
#    #root /usr/share/nginx/html;
#    #
#    #location / {
#    #    #root /usr/share/nginx/html;
#    #    index index.html index.htm index.php;
#    #}
#    #
#    #location ~ \.php$ {
#    #    #root /usr/share/nginx/html;
#    #    fastcgi_pass phpfpm:9000;
#    #    fastcgi_split_path_info ^(.+\.php)(/.+)$;
#    #    fastcgi_index index.php;
#    #    fastcgi_param REMOTE_ADDR $http_x_real_ip;
#    #    fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name;
#    #    include fastcgi_params;
#    #    if (!-f $document_root$fastcgi_script_name) {
#    #        return 404;
#    #    }
#    #}
#    
#    #############################################################################
#    
#    # use this for apache2 (with php)
#    
#    #location / {
#    #    proxy_set_header Host $http_host;
#    #    proxy_set_header X-Real-IP $remote_addr;
#    #    proxy_set_header X-Forwarded-Proto https;
#    #    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#    #    proxy_set_header X-Forwarded-Ssl on;
#    #    #proxy_redirect http:// https://;
#    #    proxy_redirect off;
#    #    add_header Pragma "no-cache";
#    #    proxy_pass http://apache:80;
#    #
#    #	  #proxy_intercept_errors  on;
#    #    #error_page 502 503 504 = @error_page;
#    #}
#    
#    #############################################################################
#    
#}
